package com.dfire.retail.app.manage.activity.stockmanager;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;

import com.dfire.retail.app.manage.R;
import com.dfire.retail.app.manage.RetailApplication;
import com.dfire.retail.app.manage.activity.logisticmanager.SelectShopActivity;
import com.dfire.retail.app.manage.adapter.StockCheckRecordAdapter;
import com.dfire.retail.app.manage.common.SelectDateDialog;
import com.dfire.retail.app.manage.data.AllShopVo;
import com.dfire.retail.app.manage.data.ShopVo;
import com.dfire.retail.app.manage.data.StockCheckRecordVo;
import com.dfire.retail.app.manage.global.Constants;
import com.dfire.retail.app.manage.network.AsyncHttpPost;
import com.dfire.retail.app.manage.network.RequestParameter;
import com.dfire.retail.app.manage.network.RequestResultCallback;
import com.dfire.retail.app.manage.util.JsonUtil;
import com.dfire.retail.app.manage.util.ToastUtil;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;

/**
 * 库存管理-盘点记录
 * @author ys
 *
 */
@SuppressLint("SimpleDateFormat")
public class StockCheckRecordActivity extends Activity implements OnClickListener,OnItemClickListener{

	private ProgressDialog progressDialog;
	
	private List<StockCheckRecordVo> stockCheckRecordList;
	
	private ListView inventory_records_lv;
	
	private int currentPage=1;
	
	private TextView shopName,select_time;
	
	private ShopVo currentShop;
	
	private String shopId;
	
	private SelectDateDialog mDateDialog;
	
	private String selectDate = null;
	
	private Long sendEndTime;
	
	private boolean nodata;
	
	private boolean is_divPage;// 是否进行分页操作
	
	private Integer pageSize = 0;
	
	private AllShopVo allShopVo;
	
	private StockCheckRecordAdapter stockCheckRecordAdapter;
	
	private ImageButton back_btn,export;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_stock_check_records);
		this.findView();
	}
	
	public void findView(){
		this.shopId = RetailApplication.getShopVo().getShopId();
		this.currentShop = RetailApplication.getShopVo();
		this.stockCheckRecordList = new ArrayList<StockCheckRecordVo>();
		this.select_time = (TextView)findViewById(R.id.select_time);
		this.shopName = (TextView)findViewById(R.id.shopName);
		this.back_btn = (ImageButton)findViewById(R.id.back_btn);
		this.export = (ImageButton)findViewById(R.id.export);
		this.back_btn.setOnClickListener(this);
		this.export.setOnClickListener(this);
		this.select_time.setOnClickListener(this);
		this.inventory_records_lv =( ListView)findViewById(R.id.inventory_records_lv);
		this.stockCheckRecordAdapter = new StockCheckRecordAdapter(StockCheckRecordActivity.this, stockCheckRecordList);
		this.inventory_records_lv.setAdapter(stockCheckRecordAdapter);
		this.inventory_records_lv.setOnItemClickListener(StockCheckRecordActivity.this);
		this.inventory_records_lv.setOnScrollListener(new OnScrollListener() {
			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {
				 if (is_divPage && scrollState == OnScrollListener.SCROLL_STATE_IDLE) {
					if (nodata) {
						currentPage++;
						getStockQuery();
					}
				 }
			}

			@Override
			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {
				is_divPage = (firstVisibleItem + visibleItemCount == totalItemCount);
			}
		});
		//判断是否是总部 登陆的
		if (currentShop.getType() == ShopVo.DANDIAN || currentShop.getType() == ShopVo.MENDIAN) {
			this.shopName.setCompoundDrawables(null, null, null, null);
			this.shopName.setText(currentShop.getShopName());
		}else{
			this.shopName.setOnClickListener(this);
			this.shopName.setText("所有门店");
		}
		
		this.progressDialog = new ProgressDialog(StockCheckRecordActivity.this);
		this.progressDialog.setCancelable(false);
		this.progressDialog.setCanceledOnTouchOutside(false);
		this.progressDialog.setMessage("加载中，请稍后。。。");
		this.mDateDialog = new SelectDateDialog(StockCheckRecordActivity.this,true);//时间
		
		this.getStockQuery();
	}
	
	
	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.select_time:
			pushDate();
			break;
		case R.id.shopName:
			Intent selectIntent =new Intent(StockCheckRecordActivity.this,SelectShopActivity.class);
			selectIntent.putExtra("selectShopId", shopId);
			selectIntent.putExtra("activity", "stockCheckRecordActivity");
			startActivityForResult(selectIntent, 100);
			break;
		case R.id.back_btn:
			finish();
			break;
		case R.id.export:
			Intent exportIntent =new Intent(StockCheckRecordActivity.this,StockExportActivity.class);
			exportIntent.putExtra("shopId", shopId);
			exportIntent.putExtra("sendTime", sendEndTime);
			startActivity(exportIntent);
			break;
		}
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if(resultCode==100){
			Bundle b=data.getExtras();
			allShopVo=(AllShopVo)b.getSerializable("shopVo");
			if (allShopVo!=null) {
				shopName.setText(allShopVo.getShopName());
				shopId = allShopVo.getShopId();
				currentPage = 1;//选择以后初始化页数
				stockCheckRecordList.clear();
				getStockQuery();
			}
		}
	}
	/**
	 * 弹出日期
	 */
	private void pushDate(){
		mDateDialog.show();
		mDateDialog.getTitle().setText("要求到货日期");
		mDateDialog.updateDays(selectDate);
		mDateDialog.getmClearDate().setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				mDateDialog.dismiss();
				select_time.setText("请选择");
				sendEndTime = null;
				currentPage = 1;//选择以后初始化页数
				stockCheckRecordList.clear();
				getStockQuery();
			}
			
		});
		
		mDateDialog.getConfirmButton().setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				mDateDialog.dismiss();
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd mm:hh:ss");
				selectDate = mDateDialog.getCurrentData();
				select_time.setText(selectDate);
				if (selectDate!=null) {
					try {
						sendEndTime = (sdf.parse((selectDate+" 00:00:00"))).getTime();
					} catch (ParseException e) {
						sendEndTime = null;
					}
				}
				currentPage = 1;//选择以后初始化页数
				stockCheckRecordList.clear();
				getStockQuery();
			}
		});
		mDateDialog.getCancelButton().setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				mDateDialog.dismiss();
			}
		});
	}
	/**
	 * 盘点记录列表
	 */
	private void getStockQuery() {
		nodata = false;
		progressDialog.show();
		
		RequestParameter params = new RequestParameter(true);
		params.setUrl(Constants.BASE_URL + "checkStockRecord/list");
		params.setParam("shopId", shopId);
		params.setParam("currentPage", currentPage);
		params.setParam("starttime", sendEndTime);
		params.setParam("endtime", sendEndTime);
		new AsyncHttpPost(params, new RequestResultCallback() {
			@SuppressWarnings("unchecked")
			@Override
			public void onSuccess(String str) {
				progressDialog.dismiss();
				JsonObject jo = new JsonParser().parse(str).getAsJsonObject();
				JsonElement jsonElement = jo.get("returnCode");
				String returnCode = null;
				if (jsonElement != null) {
					returnCode = jsonElement.getAsString();
				}

				if (returnCode == null || !returnCode.equals("success")) {
					ToastUtil.showShortToast(StockCheckRecordActivity.this, "获取失败");
					return;
				}
				JsonUtil ju = new JsonUtil(str);
				if (ju.isError(StockCheckRecordActivity.this)) {
					return;
				}
				List<StockCheckRecordVo> checkRecordVos = new ArrayList<StockCheckRecordVo>();
				checkRecordVos = (List<StockCheckRecordVo>) ju.get(Constants.STOCK_CHECK_RECORD_LIST, new TypeToken<List<StockCheckRecordVo>>(){}.getType());
				pageSize = (Integer)ju.get("pageCount",Integer.class);
				if (checkRecordVos != null && checkRecordVos.size() > 0) {
					if (currentPage<=pageSize){
						nodata = true;
					}
					stockCheckRecordList.addAll(checkRecordVos);
				}
				stockCheckRecordAdapter.notifyDataSetChanged();
			}
			
			@Override
			public void onFail(Exception e) {
				progressDialog.dismiss();
				ToastUtil.showShortToast(StockCheckRecordActivity.this, "获取失败");
				e.printStackTrace();
			}
		}).execute();
	}

	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position,
			long id) {
		StockCheckRecordVo checkRecordVo = stockCheckRecordList.get(position);
		Intent intent = new Intent(StockCheckRecordActivity.this,StockCheckRecordResultActivity.class);
		Bundle bundle=new Bundle();
		bundle.putSerializable("checkRecordVo", checkRecordVo);
		intent.putExtras(bundle);
		intent.putExtra("shopId", shopId);
		intent.putExtra("shopName", shopName.getText().toString());
		startActivity(intent);
	}
}
