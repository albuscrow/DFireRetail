package com.dfire.retail.app.manage.activity.retailmanager;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.TextView;

import com.dfire.retail.app.manage.R;
import com.dfire.retail.app.manage.activity.TitleActivity;
import com.dfire.retail.app.manage.adapter.EmployeeInfoAdapter;
import com.dfire.retail.app.manage.data.RoleVo;
import com.dfire.retail.app.manage.data.ShopVo;
import com.dfire.retail.app.manage.data.UserVo;
import com.dfire.retail.app.manage.global.Constants;
import com.dfire.retail.app.manage.network.AsyncHttpPost;
import com.dfire.retail.app.manage.network.RequestParameter;
import com.dfire.retail.app.manage.network.RequestResultCallback;
import com.dfire.retail.app.manage.util.ToastUtil;
import com.dfire.retail.app.manage.util.Utility;
import com.dfire.retail.app.manage.widget.spinner.AbstractSpinerAdapter.IOnItemSelectListener;
import com.dfire.retail.app.manage.widget.spinner.SpinerPopWindow;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

public class EmployeeInfoActivity extends TitleActivity implements
        RequestResultCallback {

    private static final String TAG = "EmployeeInfoActivity";
    
    private TextView _shopChoiceButton;
    private TextView _roleChoiceButton;

    List<UserVo> mList;
    private ListView mListView;
    private EmployeeInfoAdapter mAdapter;

    private SpinerPopWindow _shopPopupWindow;
    private SpinerPopWindow _rolePopupWindow;

    private int _shopChoicePosition = 0;
    private int _roleChoicePosition = 0;
    /**
     * 标记List当前显示的页面，当向下滑动时，请求下一页.
     */
    private int _currentRequestPage = 1;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.employee_info);
        
        mListView = (ListView) findViewById(R.id.attendance_list);
        
        //理论上可以直接获取到员工所在的店铺和角色，然后直接设置
        _shopChoiceButton = (TextView) findViewById(R.id.shop_choice);
        List<ShopVo> shopList = UserInfoInit.getInstance().getShopList();
        if (shopList != null && shopList.size() > _shopChoicePosition) {
            _shopChoiceButton.setClickable(true);
            _shopChoiceButton.setText(shopList.get(_shopChoicePosition).getShopName());
        } else {
            _shopChoiceButton.setText(null);//无数据
        }
        
        _roleChoiceButton = (TextView) findViewById(R.id.role_choice);
        List<RoleVo> roleList = UserInfoInit.getInstance().getRoleList();
        if (roleList != null && roleList.size() > _roleChoicePosition) {
            _roleChoiceButton.setClickable(true);
            _roleChoiceButton.setText(roleList.get(_roleChoicePosition).getRoleName());//注意数据的存在性
        } else {
            _roleChoiceButton.setText(null);
        }
        
        setTitleRes(R.string.employee_info);
        showBackbtn();
        startRequestListData();
    }

    private void initRolePopupWidnow(final TextView v) {
        if (_rolePopupWindow == null) {
            _rolePopupWindow = new SpinerPopWindow(this);
            _rolePopupWindow.setItemListener(new IOnItemSelectListener() {

                @Override
                public void onItemClick(int position) {
                    _roleChoicePosition = position;
                    v.setText(UserInfoInit.getInstance().getRoleList().get(position).getRoleName());
                    startRequestListData();
                }
            });
            _roleChoicePosition = 0;
            _rolePopupWindow.refreshData(UserInfoInit.getInstance().getRoleList(), _roleChoicePosition);
            _rolePopupWindow.setWidth((int)(v.getPaint().measureText(UserInfoInit.getInstance().getRoleListMax()) * 1.4f));
        }
    }
    
    private void initShopPopupWindow(final TextView v) {
        if (_shopPopupWindow == null) {
            _shopPopupWindow = new SpinerPopWindow(this);
            _shopPopupWindow.setItemListener(new IOnItemSelectListener() {

                @Override
                public void onItemClick(int position) {
                    _shopChoicePosition = position;
                    v.setText(UserInfoInit.getInstance().getShopList().get(position).getShopName());
                    startRequestListData();
                }
            });
            _shopChoicePosition = 0;
            _shopPopupWindow.refreshData(UserInfoInit.getInstance().getShopList(), _shopChoicePosition);
            _shopPopupWindow.setWidth((int)(v.getPaint().measureText(UserInfoInit.getInstance().getShopListMax()) * 1.4f));
        }
    }
    
    public void ClickListener(View v) {
        switch (Integer.parseInt(String.valueOf(v.getTag()))) {
        case 1:
            initShopPopupWindow((TextView)v);
            _shopPopupWindow.showAsDropDown(v);
            break;

        case 2:
            initRolePopupWidnow((TextView)v);
            _rolePopupWindow.showAsDropDown(v);
            break;
            
        case 3://member_info_add
            break;
        }
    }
    
    /**
     * 网络请求，显示员工列表.
     * 根据操作(viewTag) 和 选中位置(position)决定
     * 
     */
    private void startRequestListData() {
        List<ShopVo> shopList = UserInfoInit.getInstance().getShopList();
        List<RoleVo> roleList = UserInfoInit.getInstance().getRoleList();
        if (shopList == null || shopList.size() <= _shopChoicePosition
                || roleList == null || roleList.size() <= _roleChoicePosition) {
            return;//无数据，直接结束
        }
        
        getProgressDialog().setCancelable(false);
        getProgressDialog().setMessage("请求员工信息");
        getProgressDialog().show();
        
        RequestParameter parameters = new RequestParameter(true);
        parameters.setUrl(Constants.EMPLOYEE_INFO_LIST);
        parameters.setParam("shopId", shopList.get(_shopChoicePosition).getShopId());
        parameters.setParam("roleId", roleList.get(_roleChoicePosition).getRoleId());
        parameters.setParam("currentPage", String.valueOf(_currentRequestPage));
        new AsyncHttpPost(parameters, this).execute();
    }

    @Override
    public void onFail(Exception e) {
        getProgressDialog().dismiss();
        ToastUtil.showShortToast(getApplicationContext(), e.toString());
        testListData();
    }
    
    @Override
    public void onSuccess(String str) {
        getProgressDialog().dismiss();
        try {
            JSONObject object = new JSONObject(str);
            if (object.isNull("returnCode") || "fail".equals(object.getString("returnCode"))) {
                if (Constants.DEBUG)
                    Log.i(TAG, object.getString("exceptionCode"));
                testListData();
            } else {
                JSONArray userList = object.getJSONArray("userList");
                mList = new ArrayList<UserVo>();
                for (int i = 0; i < userList.length(); i++) {
                    mList.add(new UserVo(userList.getJSONObject(i)));
                }
                initListShopAndRoleData();
                initList();
            }
        } catch (Exception e) {
            testListData();
        }
    }

    /**
     * 初始化员工管理查询列表的角色数据及店家数据
     */
    private void initListShopAndRoleData() {
        ShopVo shop = UserInfoInit.getInstance().getShopList().get(_shopChoicePosition);
        RoleVo role = UserInfoInit.getInstance().getRoleList().get(_roleChoicePosition);
        UserVo user;
        for (int i = 0; i < mList.size(); i++) {
            user = mList.get(i);
            user.setShopId(shop.getShopId());
            user.setShopName(shop.getShopName());
            user.setRoleId(role.getRoleId());
            user.setRoleName(role.getRoleName());
            user.setLogId(R.drawable.man);
        }
    }
    
    private void initList() {
        mAdapter = new EmployeeInfoAdapter(EmployeeInfoActivity.this, mList);
        mListView.setAdapter(mAdapter);
        Utility.setListViewHeightBasedOnChildren(mListView);

        mListView.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int position,
                    long arg3) {
                Bundle bundle = new Bundle();
                bundle.putSerializable("data", mList.get(position));
                Intent intent = new Intent(EmployeeInfoActivity.this,
                        EmployeeDetailActivity.class);
                intent.putExtras(bundle);
                startActivityForResult(intent, position);
            }
        });
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        
        if (_shopPopupWindow != null) {
            _shopPopupWindow.dismiss();
            _shopPopupWindow = null;
        }

        if (_rolePopupWindow != null) {
            _rolePopupWindow.dismiss();
            _rolePopupWindow = null;
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (resultCode == RESULT_OK && data != null) {
            if (data.getBooleanExtra("result", false)) {// 默认保存操作
                mList.remove(requestCode);// 删除
            } else {// 保存
                UserVo item = (UserVo) data
                        .getSerializableExtra("employee_info");
                if (item != null) {
                    mList.set(requestCode, item);
                }
            }

            mAdapter.notifyDataSetChanged();
            Utility.setListViewHeightBasedOnChildren(mListView);
        }
    }
    
    /**
     * 更新服务端用户数据
     */
    private void updateUserVo() {
        
    }
    
    /**
     * List的模拟测试数据
     */
    private void testListData() {
        if (!Constants.TEST) {
            return;
        }
        mList = new ArrayList<UserVo>();
        mList.add(new UserVo("huajianlianshuoceshiuserinfoid00", "王晓红", "王晓红", 
                "001", "2014-9-26", "13488822653", 
                Integer.valueOf(1), "1994-9-26", 
                "12455441551122", Integer.valueOf(1), "西湖西溪花园"));
        mList.add(new UserVo("huajianlianshuoceshiuserinfoid00", "王宇", "王宇", 
                "002", "2014-1-26", "18888822653", 
                Integer.valueOf(1), "1984-9-26", 
                "15555441551122", Integer.valueOf(1), "西湖文一路"));
        mList.add(new UserVo("huajianlianshuoceshiuserinfoid00", "孙晓梅", "孙晓梅", 
                "003", "2013-1-26", "17788822653", 
                Integer.valueOf(1), "1987-9-26", 
                "28855441551122", Integer.valueOf(1), "西湖文三路"));
        
        initListShopAndRoleData();
        
        initList();
    }
}
