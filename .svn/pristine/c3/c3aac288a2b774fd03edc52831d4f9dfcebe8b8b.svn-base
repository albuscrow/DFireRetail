package com.dfire.retail.app.manage.activity.logisticmanager;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;

import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.dfire.retail.app.manage.R;
import com.dfire.retail.app.manage.RetailApplication;
import com.dfire.retail.app.manage.activity.TitleActivity;
import com.dfire.retail.app.manage.activity.item.StoreCollectGoodsItem;
import com.dfire.retail.app.manage.common.SupplyDialog;
import com.dfire.retail.app.manage.data.StockInDetailVo;
import com.dfire.retail.app.manage.data.StockInVo;
import com.dfire.retail.app.manage.global.Constants;
import com.dfire.retail.app.manage.network.AsyncHttpPost;
import com.dfire.retail.app.manage.network.RequestParameter;
import com.dfire.retail.app.manage.network.RequestResultCallback;
import com.dfire.retail.app.manage.util.JsonUtil;
import com.dfire.retail.app.manage.util.ToastUtil;
import com.dfire.retail.app.manage.vo.supplyManageVo;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;

/**
 * 物流管理-门店进货
 * @author ys
 *
 */
public class StoreCollectAddActivity extends TitleActivity implements OnClickListener{

	public static StoreCollectAddActivity instance = null; 
	
	private RelativeLayout add_layout,collect_layout;
	
	private LinearLayout store_collect_add_lv,goodsTotalPrice_view;
	
	private StockInDetailVo stockInDetailVo;
	
	private List<StockInDetailVo> stockInDetailVos;
	
	private LayoutInflater inflater;
	
	private String collectState;//操作状态
	
	private StockInVo stockInVo;
	
	private ProgressDialog progressDialog;

	private List<StockInDetailVo> stockList;//查询的list
	
	private String lastVer = "";//版本号
	
	private String stockInNo = "";
	
	private TextView supplyName_tx,stockInNo_tx,mGoodsTotalSum,mGoodsTotalPrice;
	
	private String stockInId,recordType = "p";//进货单id  数据来源(添加默认p)
	
	private SupplyDialog supplyDialog;
	
	private List<supplyManageVo> supplyManageVos;
	
	private String supplyId;//供应商id  
	
	private Button confirm,refuse;
	
	private View view;
	
	public HashMap<String, StoreCollectGoodsItem> collectHashMap = new HashMap<String, StoreCollectGoodsItem>();
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_store_collect_add);
		inflater = LayoutInflater.from(this);
		instance = this;
		setTitleText("门店进货");
		showBackbtn();
		findView();
	}
	/**
	 * 初始化控件
	 */
	public void findView(){
		stockList = new ArrayList<StockInDetailVo>();
		stockInDetailVos=new ArrayList<StockInDetailVo>();
		supplyManageVos=new ArrayList<supplyManageVo>();
		add_layout=(RelativeLayout)findViewById(R.id.add_layout);
		store_collect_add_lv=(LinearLayout)findViewById(R.id.store_collect_add_lv);
		collect_layout=(RelativeLayout)findViewById(R.id.collect_layout);
		supplyName_tx=(TextView)findViewById(R.id.supplyName_tx);
		stockInNo_tx=(TextView)findViewById(R.id.stockInNo_tx);
		mGoodsTotalSum=(TextView)findViewById(R.id.goodsTotalSum);
		mGoodsTotalPrice=(TextView)findViewById(R.id.goodsTotalPrice);
		confirm=(Button)findViewById(R.id.confirm);
		refuse=(Button)findViewById(R.id.refuse);
		view=(View)findViewById(R.id.view);
		goodsTotalPrice_view=(LinearLayout)findViewById(R.id.goodsTotalPrice_view);
		
		confirm.setOnClickListener(this);
		refuse.setOnClickListener(this);
		add_layout.setOnClickListener(this);
		
		progressDialog = new ProgressDialog(StoreCollectAddActivity.this);
		progressDialog.setCancelable(false);
		progressDialog.setCanceledOnTouchOutside(false);
		progressDialog.setMessage("加载中，请稍后。。。");
		this.supplyList();
		supplyDialog = new SupplyDialog(StoreCollectAddActivity.this,supplyManageVos);//状态
		if (!StoreCollectActivity.instance.isVisPrice) {//判断是否显示进货价
			goodsTotalPrice_view.setVisibility(View.INVISIBLE);
			
		}
		//获取传来的值
		collectState = getIntent().getStringExtra("collectState").toString();
		if (!collectState.equals(Constants.COLLECT_ADD)) {
			stockInVo = (StockInVo) getIntent().getSerializableExtra("stockInVo");
			supplyName_tx.setCompoundDrawables(null, null, null, null);
			supplyName_tx.setTextColor(Color.parseColor("#666666"));
			collect_layout.setVisibility(View.VISIBLE);
			if (collectState.equals(Constants.COLLECT_DISTRIBUTION)||collectState.equals(Constants.STORE_COLLECT_DISTRIBUTION)) {
			}else if (collectState.equals(Constants.COLLECT_RECEIVING)||collectState.equals(Constants.STORE_COLLECT_RECEIVING)) {
				view.setVisibility(View.GONE);
				add_layout.setVisibility(View.GONE);
				refuse.setVisibility(View.GONE);
				confirm.setVisibility(View.GONE);
			}
			stockInId = stockInVo.getStockInId();
			recordType = stockInVo.getRecordType();
			this.findCollectInfoById();
		}else {
			supplyName_tx.setOnClickListener(this);
			refuse.setVisibility(View.GONE);
		}
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		
	}
	/**
	 * 回调
	 */
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		
		RetailApplication application = (RetailApplication) getApplication();
		HashMap<String, Object> map = application.getObjMap();
		stockInDetailVo = (StockInDetailVo)map.get("returnCollectAdd");
		if (stockInDetailVo!=null) {
			//判断 map 里面是否存有 该key 对应的value
			if (collectHashMap.containsKey(stockInDetailVo.getGoodsId())) {
				StoreCollectGoodsItem goodsItem = collectHashMap.get(stockInDetailVo.getGoodsId());
				//判断该item 里面对应的对象的goodsSum 属性是否为0  如果是0 把移除的view 在加到LinearLayout里面去 如果不为空 给对应的数量加1
				if (goodsItem.getStockInDetailVo().getGoodsSum()==0){
					//判断是operateType 是否是 del如果是修改为edit
					if (goodsItem.getStockInDetailVo().getOperateType().equals("del")) {
						stockInDetailVos.get(goodsItem.getListIndex()).setOperateType("edit");
					}
					store_collect_add_lv.addView(goodsItem.getItemView());//重新添加到view 里面去
					goodsItem.getGoodNum().setText(String.valueOf(stockInDetailVo.getGoodsSum()));//设置item 数量值
					goodsItem.getStockInDetailVo().setGoodsSum(stockInDetailVo.getGoodsSum());
					stockInDetailVos.get(goodsItem.getListIndex()).setGoodsSum(stockInDetailVo.getGoodsSum());
				}else {
					Integer sum = Integer.parseInt(collectHashMap.get(stockInDetailVo.getGoodsId()).getGoodNum().getText().toString());
					goodsItem.getGoodNum().setText(String.valueOf(sum+stockInDetailVo.getGoodsSum()));
					goodsItem.getStockInDetailVo().setGoodsSum(sum+stockInDetailVo.getGoodsSum());
					stockInDetailVos.get(goodsItem.getListIndex()).setGoodsSum(sum+stockInDetailVo.getGoodsSum());
				}
			}else {
				stockInDetailVo.setOperateType("add");
				stockInDetailVos.add(stockInDetailVo);
				
				StoreCollectGoodsItem collectGoodsItem = new StoreCollectGoodsItem(this,inflater,false);
				if (!StoreCollectActivity.instance.isVisPrice) {
					collectGoodsItem.getGoods_price().setVisibility(View.INVISIBLE);//隐藏进货价
				}
				collectGoodsItem.initWithData(stockInDetailVo,stockInDetailVos.size()-1);
				store_collect_add_lv.addView(collectGoodsItem.getItemView());
				collectHashMap.put(stockInDetailVo.getGoodsId(), collectGoodsItem);
			}
		}
		map.put("returnCollectAdd", null);
	}
 
	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.add_layout:
			Intent addGoods=new Intent(StoreCollectAddActivity.this,StoreOrderAddGoodsActivity.class);
			addGoods.putExtra("flag", "returnCollectAdd");
			startActivityForResult(addGoods, 100);
			break;
		case R.id.supplyName_tx:
			pushStatus();
			break;
		case R.id.confirm:
			if (initData()) {
				isReceiptCollect("receipt");
			}
			break;
		case R.id.refuse:
			isReceiptCollect("refuse");
			break;
		}
	}
	
	/**
	 * 提交 对应设值
	 */
	private boolean initData(){
		for (int i = 0; i < stockInDetailVos.size(); i++) {
			stockInDetailVos.get(i).setGoodsTotalPrice(stockInDetailVos.get(i).getGoodsPrice().multiply(new BigDecimal(stockInDetailVos.get(i).getGoodsSum())));//设置总价
		}
		for (int i = 0; i < stockInDetailVos.size(); i++) {
			StockInDetailVo stockInDetailVo = stockInDetailVos.get(i);
			if (stockInDetailVo.getOperateType().equals("add")&&stockInDetailVo.getGoodsSum()==0) {
				collectHashMap.remove(stockInDetailVos.get(i).getGoodsId());//移除为0的 item
				stockInDetailVos.remove(i);//移除原来没有 后来添加的 数量为0的商品
			}
		}
		return true;
	}
	
	/**
	 * 移除item
	 */
	public void removeView(StoreCollectGoodsItem goodsItem){
		store_collect_add_lv.removeView(goodsItem.getItemView());
		StockInDetailVo stockInDetailVo = goodsItem.getStockInDetailVo();
		if (stockInDetailVo.getStockInDetailId()!=null&&!stockInDetailVo.getStockInDetailId().equals("")) {//有订单ID的 del 
			stockInDetailVos.get(goodsItem.getListIndex()).setOperateType("del");
		}
		stockInDetailVos.get(goodsItem.getListIndex()).setGoodsSum(0);
	}
	
	/**
	 * 动态监听editText 修改总价格 和数量
	 */
	public void changePriceNumber(){
		if (stockInDetailVos.size()>0) {
			Integer count = 0;
			BigDecimal countPrice = new BigDecimal("0");
			for (int i = 0; i < stockInDetailVos.size(); i++) {
				count = count+stockInDetailVos.get(i).getGoodsSum();
				countPrice = countPrice.add(stockInDetailVos.get(i).getGoodsPrice().multiply(new BigDecimal(stockInDetailVos.get(i).getGoodsSum())));//设置总价
			}
			mGoodsTotalSum.setText(""+count);
			mGoodsTotalPrice.setText(""+countPrice);
		}
	}
	/**
	 * 查看详情的时候 修改删除该商品
	 */
	public void changeGoodInfo(StockInDetailVo detailVo,Integer listIndex){
		if (collectHashMap.containsKey(detailVo.getGoodsId())) {
			StoreCollectGoodsItem goodsItem = collectHashMap.get(detailVo.getGoodsId());
			if (detailVo.getGoodsSum()==0) {
				removeView(goodsItem);
				changePriceNumber();
			}else {
				goodsItem.getGoodNum().setText(String.valueOf(detailVo.getGoodsSum()));//设置item 数量值
				goodsItem.getStockInDetailVo().setGoodsSum(detailVo.getGoodsSum());
				stockInDetailVos.get(listIndex).setProductionDate(detailVo.getProductionDate());
			}
		}
	}
	/**
	 * 弹出状态
	 */
	private void pushStatus(){
		this.supplyDialog.show();
		this.supplyDialog.getmTitle().setText("供应商");
		this.supplyDialog.updateType(supplyId);
		this.supplyDialog.getConfirmButton().setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				supplyDialog.dismiss();
				Integer index = supplyDialog.getCurrentData();
				supplyManageVo supplyManageVo = supplyManageVos.get(index);
				supplyName_tx.setText(supplyManageVo.getName());
				supplyId = supplyManageVo.getId();
			}
		});
		this.supplyDialog.getCancelButton().setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				supplyDialog.dismiss();
			}
		});
	}
	
	/**
	 * 供应商列表
	 */
	private void supplyList(){
		RequestParameter params = new RequestParameter(true);
		params.setUrl(Constants.SUPPLY_INFO_MANAGE_LIST);
		params.setParam("showEntityFlg", "1");
		params.setParam("isDividePage", "0");
		new AsyncHttpPost(params, new RequestResultCallback() {
			@SuppressWarnings("unchecked")
			@Override
			public void onSuccess(String str) {
				
				JsonObject jo = new JsonParser().parse(str).getAsJsonObject();
				JsonElement jsonElement = jo.get(Constants.RETURN_CODE);
				String returnCode = null;
				if (jsonElement != null) {
					returnCode = jsonElement.getAsString();
				}
				if (returnCode == null ||!returnCode.equals(Constants.LSUCCESS)) {
					ToastUtil.showShortToast(StoreCollectAddActivity.this, "获取失败");
					return;
				}
				JsonUtil ju = new JsonUtil(str);
				if (ju.isError(StoreCollectAddActivity.this)) {
					return;
				}
				List<supplyManageVo> vos = new ArrayList<supplyManageVo>();
				vos = (List<supplyManageVo>) ju.get(Constants.SUPPLY_MANAGE_LIST, new TypeToken<List<supplyManageVo>>(){}.getType());
				if (vos.size()>0) {
					supplyManageVos.clear();
					supplyManageVos.addAll(vos);
				}
			}

			@Override
			public void onFail(Exception e) {
				
			}
		}).execute();
		
	}
	/**
	 * 确定 ,拒绝
	 */
	private void isReceiptCollect(String operateType){
		RequestParameter params = new RequestParameter(true);
		params.setUrl(Constants.BASE_URL + "purchase/save");
		params.setParam("stockInId", stockInId);
		params.setParam("recordType", recordType);
		params.setParam("operateType", operateType);
		params.setParam("lastVer", lastVer);
		if (operateType.equals("receipt")) {
			params.setParam("supplyId", supplyId);
			params.setParam("shopId", RetailApplication.getShopVo().getShopId());
			try {
				params.setParam("stockInDetailList",  new JSONArray(new Gson().toJson(stockInDetailVos)));
			} catch (JSONException e1) {
				params.setParam("stockInDetailList",  null);
			}
		}
		new AsyncHttpPost(params, new RequestResultCallback() {
			@Override
			public void onSuccess(String str) {
				JsonObject jo = new JsonParser().parse(str).getAsJsonObject();
				JsonElement jsonElement = jo.get(Constants.RETURN_CODE);
				String returnCode = null;
				if (jsonElement != null) {
					returnCode = jsonElement.getAsString();
				}
				if (returnCode == null ||!returnCode.equals(Constants.LSUCCESS)) {
					JsonUtil ju = new JsonUtil(str);
					if (ju.isError(StoreCollectAddActivity.this)) {
						return;
					}
					return;
				}else {
					StoreCollectAddActivity.this.finish();
					StoreCollectActivity.instance.stockInList.clear();
					StoreCollectActivity.instance.currentPage = 1;
					StoreCollectActivity.instance.getStoreCollect();
				}
			}
			@Override
			public void onFail(Exception e) {
				
			}
		}).execute();
		
	}
	/**
	 * 根据id 查询进货单详情
	 */
	private void findCollectInfoById(){
		progressDialog.show();
		
		RequestParameter params = new RequestParameter(true);
		params.setUrl(Constants.BASE_URL + "purchase/detail");
		params.setParam("stockInId", stockInId);
		params.setParam("recordType", recordType);
		new AsyncHttpPost(params, new RequestResultCallback() {
			@SuppressWarnings("unchecked")
			@Override
			public void onSuccess(String str) {
				progressDialog.dismiss();
				
				JsonUtil ju = new JsonUtil(str);
				if (ju.isError(StoreCollectAddActivity.this)) {
					return;
				}
				stockList = (List<StockInDetailVo>) ju.get(Constants.STOCK_INDETAIL_LIST, new TypeToken<List<StockInDetailVo>>(){}.getType());
				
				stockInNo = ju.get("stockInNo",String.class).toString();//订单号
				lastVer = String.valueOf(ju.get("lastVer",String.class));//得到当前版本号
				supplyId = String.valueOf(ju.get("supplyId", String.class));//供应商ID
				String supplyName = String.valueOf(ju.get("supplyName",String.class));
				String goodsTotalSum =  String.valueOf(ju.get("goodsTotalSum",Integer.class));
				String goodsTotalPrice =  String.valueOf(ju.get("goodsTotalPrice",BigDecimal.class));
				
				supplyName_tx.setText(supplyName);
				stockInNo_tx.setText(stockInNo);
				mGoodsTotalSum.setText(""+goodsTotalSum);
				mGoodsTotalPrice.setText(""+goodsTotalPrice);
				
				if (stockList!=null&& stockList.size() > 0) {
					stockInDetailVos.addAll(stockList);
				}
				/**创建单项*/
				if (stockInDetailVos!=null) {
					for (int i = 0; i < stockInDetailVos.size(); i++) {
						StoreCollectGoodsItem storeCollectGoodsItem = null;
						if(collectState.equals(Constants.COLLECT_RECEIVING)||collectState.equals(Constants.STORE_COLLECT_RECEIVING)){
							storeCollectGoodsItem = new StoreCollectGoodsItem(StoreCollectAddActivity.this,inflater,true);
						}else {
							storeCollectGoodsItem = new StoreCollectGoodsItem(StoreCollectAddActivity.this,inflater,false);
						}
						if (!StoreCollectActivity.instance.isVisPrice) {
							storeCollectGoodsItem.getGoods_price().setVisibility(View.INVISIBLE);//隐藏进货价
						}
						storeCollectGoodsItem.initWithData(stockInDetailVos.get(i),i);
						store_collect_add_lv.addView(storeCollectGoodsItem.getItemView());
						collectHashMap.put(stockInDetailVos.get(i).getGoodsId(), storeCollectGoodsItem);//goodsItem 存入map(原有view)
					}
				}
			}
			@Override
			public void onFail(Exception e) {
				progressDialog.dismiss();
				ToastUtil.showShortToast(StoreCollectAddActivity.this, Constants.getErrorInf(null, null));
				e.printStackTrace();
			}
		}).execute();
	}
}
