package com.dfire.retail.app.manage.activity.logisticmanager;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.dfire.retail.app.manage.R;
import com.dfire.retail.app.manage.activity.item.StoreCollectGoodsItem;
import com.dfire.retail.app.manage.data.SearchGoodsVo;
import com.dfire.retail.app.manage.data.StockInDetailVo;
import com.dfire.retail.app.manage.data.StockInVo;
import com.dfire.retail.app.manage.global.Constants;

/**
 * 物流管理-门店进货
 * @author ys
 *
 */
public class StoreCollectAddActivity extends Activity implements OnClickListener{

	private ImageButton title_left;
	
	private ImageButton title_right;
	
	private RelativeLayout add_layout;
	
	private LinearLayout store_collect_add_lv;
	
	private StockInDetailVo stockInDetailVo;
	
	private List<StockInDetailVo> stockInDetailVos;
	
	private SearchGoodsVo searchGoodsVo;
	
	private LayoutInflater inflater;
	
	private String collectState;//操作状态
	
	private StockInVo stockInVo;
	
	private ProgressDialog progressDialog;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_store_collect_add);
		inflater = LayoutInflater.from(this);
		findView();
	}
	
	public void findView(){
		stockInDetailVos=new ArrayList<StockInDetailVo>();
		title_left=(ImageButton)findViewById(R.id.title_left);
		title_left.setOnClickListener(this);
		title_right=(ImageButton)findViewById(R.id.title_right);
		title_right.setOnClickListener(this);
		add_layout=(RelativeLayout)findViewById(R.id.add_layout);
		add_layout.setOnClickListener(this);
		store_collect_add_lv=(LinearLayout)findViewById(R.id.store_collect_add_lv);
		
		progressDialog = new ProgressDialog(StoreCollectAddActivity.this);
		progressDialog.setCancelable(false);
		progressDialog.setCanceledOnTouchOutside(false);
		progressDialog.setMessage("加载中，请稍后。。。");
		
		//获取传来的值
		collectState = getIntent().getStringExtra("collectState").toString();
		if (!collectState.equals(Constants.COLLECT_ADD)) {
			stockInVo = (StockInVo) getIntent().getSerializableExtra("stockInVo");
		}
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if(resultCode==100){
			Bundle b=data.getExtras();
			searchGoodsVo=(SearchGoodsVo)b.getSerializable("orderAdd");
			stockInDetailVo = new StockInDetailVo();
			stockInDetailVo.setGoodsId(searchGoodsVo.getGoodsId());//id
			stockInDetailVo.setGoodsName(searchGoodsVo.getGoodsName());//名称
			stockInDetailVo.setGoodsBarcode(searchGoodsVo.getBarcode());//条码
			stockInDetailVo.setGoodsPrice(searchGoodsVo.getPurchasePrice());//价格
			stockInDetailVo.setGoodsSum(1);//默认 选择1件
			stockInDetailVo.setGoodsTotalPrice(searchGoodsVo.getPurchasePrice());//默认合计 。 会乘以数量
			stockInDetailVo.setOperateType("add"); //操作类型
			stockInDetailVos.add(stockInDetailVo);
			
			StoreCollectGoodsItem collectGoodsItem = new StoreCollectGoodsItem(this,inflater,false);
			collectGoodsItem.initWithData(stockInDetailVo);
			store_collect_add_lv.addView(collectGoodsItem.getItemView());
		}
	}
 
	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.title_left:
			
			break;

		case R.id.title_right:
			
			break;
			
		case R.id.add_layout:
			Intent addGoods=new Intent(StoreCollectAddActivity.this,StoreOrderAddGoodsActivity.class);
			addGoods.putExtra("flag", "returnCollectAdd");
			startActivityForResult(addGoods, 100);
			break;
		}
	}
	/**
	 * 根据id 查询订单下面的商品信息
	 */
//	private void findOrderInfoById(String orderGoodsId){
//		progressDialog.show();
//		
//		RequestParameter params = new RequestParameter(true);
//		params.setUrl(Constants.BASE_URL + "orderGoods/detail");
//		params.setParam("orderGoodsId", orderGoodsId);
//		new AsyncHttpPost(params, new RequestResultCallback() {
//			@SuppressWarnings("unchecked")
//			@Override
//			public void onSuccess(String str) {
//				progressDialog.dismiss();
//				
//				JsonUtil ju = new JsonUtil(str);
//				if (ju.isError(StoreCollectAddActivity.this)) {
//					return;
//				}
//				detailVos = (List<OrderGoodsDetailVo>) ju.get(Constants.ORDER_GOODS_DETAIL_LIST, new TypeToken<List<OrderGoodsDetailVo>>(){}.getType());
//				String date = ju.get("sendEndTime",String.class).toString();
//				
//				SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
//				if (date!=null&&!date.equals("")) {
//					sendEndTime = new Date(Long.valueOf(date));//要求到货时间
//				}
//				orderGoodsNo = ju.get("orderGoodsNo",String.class).toString();//订单号
//				lastVer = String.valueOf(ju.get("lastVer",Integer.class));//得到当前版本号
//				
//				ordergoodsid.setText(orderGoodsNo);
//				store_order_time.setText(format.format(sendEndTime));
//				if (detailVos!=null&& detailVos.size() > 0) {
//					stockInDetailVoList.addAll(detailVos);
//				}
//				/**创建单项*/
//				if (stockInDetailVoList!=null) {
//					for (int i = 0; i < stockInDetailVoList.size(); i++) {
//						StoreCollectGoodsItem storeCollectGoodsItem = null;
//						if(orderState.equals(Constants.CONFIRMATION_AFTER)){
//							storeCollectGoodsItem = new StoreCollectGoodsItem(StoreCollectAddActivity.this,inflater,true);
//						}else {
//							storeCollectGoodsItem = new StoreCollectGoodsItem(StoreCollectAddActivity.this,inflater,false);
//						}
//						goodsItem.initWithData(stockInDetailVoList.get(i),i);
//						store_order_add_lv.addView(goodsItem.getItemView());
//						
//						storeOrderHashMap.put(stockInDetailVoList.get(i).getGoodsId(), goodsItem);//goodsItem 存入map(原有view)
//						
//					}
//				}
//			}
//			@Override
//			public void onFail(Exception e) {
//				progressDialog.dismiss();
//				ToastUtil.showShortToast(StoreOrderAddActivity.this, Constants.getErrorInf(null, null));
//				e.printStackTrace();
//			}
//		}).execute();
//	}
}
