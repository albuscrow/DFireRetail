package com.dfire.retail.app.manage.activity.goodsmanager;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONException;
import org.json.JSONObject;

import com.dfire.retail.app.manage.R;
import com.dfire.retail.app.manage.RetailApplication;
import com.dfire.retail.app.manage.activity.CaptureActivity;
import com.dfire.retail.app.manage.activity.goodsmanager.MyEditTextLayout.TextChangeListener;
import com.dfire.retail.app.manage.activity.goodsmanager.MySpinnerLayout.Listener;
import com.dfire.retail.app.manage.data.CategoryVo;
import com.dfire.retail.app.manage.data.GoodsVo;
import com.dfire.retail.app.manage.data.ShopVo;
import com.dfire.retail.app.manage.global.Constants;
import com.dfire.retail.app.manage.network.AsyncHttpPost;
import com.dfire.retail.app.manage.network.RequestParameter;
import com.dfire.retail.app.manage.network.RequestResultCallback;
import com.dfire.retail.app.manage.util.JsonUtil;
import com.dfire.retail.app.manage.util.ToastUtil;
import com.dfire.retail.app.manage.widget.spinner.AbstractSpinerAdapter.IOnItemSelectListener;
import com.dfire.retail.app.manage.widget.spinner.SpinerPopWindow;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.FailReason;
import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;

import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.text.Editable;
import android.text.InputType;
import android.text.TextPaint;
import android.text.TextWatcher;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.ImageButton;
import android.widget.PopupWindow;
import android.widget.PopupWindow.OnDismissListener;
import android.widget.RelativeLayout;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.TextView;

/**
 * The Class GoodsDetailActivity.
 * 
 * @author albuscrow
 */
public class GoodsDetailActivity extends GoodsManagerBaseActivity implements OnClickListener{
	
	private ArrayList<String> shopsString;
	
	/** The mode. */
	private String mode;
	
	/** The goods. */
	private GoodsVo goods;
	
	/** The edited. */
	private boolean edited = false;
	
	/** The tongbu. */
	private OneColumnSpinner tongbu;
	
	/** The fenlei. */
	private OneColumnSpinner fenlei;
	
	/** The sort spinner view. */
	private MySpinnerLayout sortSpinnerView;
	
	/** The tongbu spinner view. */
	private MySpinnerLayout tongbuSpinnerLayout;
	
	/** The current category. */
	private Category currentCategory;
	
	/** The categorys. */
	private ArrayList<Category> categorys;
	
	
	/** The shops. */
	private List<ShopVo> shops;
	
	/** The current page. */
	private int currentPage = 1;
	
	/** The current shop. */
	private ShopVo userShop;
	
	private String tongbuShopId;
	
	/** The current shop position. */
	private int currentShopPosition;

	private ImageButton image;

	private ImageButton deleteImage;

	private ShopVo shop;

	private EditText tiaomaEditView;

	private EditText daimaEditView;

	private EditText jinhuoEditView;

	private PopupWindow popupWindow;

	private boolean isChanged = false;

	private Bitmap photo;

	private EditText name;
	
	/* (non-Javadoc)
	 * @see com.dihuo.twodfire.retail.activity.goodsmanager.GoodsManagerBaseActivity#onCreate(android.os.Bundle)
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_goods_detail);
		setTitleText(Constants.GOODS_DETAIL);
		
		setWatcher(new CountWatcher(this));
		initUI();
	}

	boolean isTwoLine = false;

	private int searchStatus;

	private EditText pingyin;

	private MyCheckBoxLayout jifenLayout;

	private MyCheckBoxLayout youhuiLayout;
	/**
	 * Inits the ui.
	 */
	private void initUI() {
		switchToEditMode();
		userShop = RetailApplication.getShopVo();
		mode = getIntent().getStringExtra(Constants.MODE);
		shop = (ShopVo) getIntent().getSerializableExtra(Constants.SHOP);
		searchStatus = getIntent().getIntExtra(Constants.SEARCH_STATUS, -1);
		image = ((ImageButton)findViewById(R.id.imageView));
		deleteImage = ((ImageButton)findViewById(R.id.deleteImage));
		
		tongbu = new OneColumnSpinner(this);
		fenlei = new OneColumnSpinner(this);
		if (mode.equals(Constants.ADD)) {
			edited = true;
			tiaomaEditView = setEditTextContent(R.id.tiaoma,Constants.BAR_CODE,Constants.EMPTY_STRING,Constants.NOT_NECESSARY, InputType.TYPE_CLASS_NUMBER);
			daimaEditView = setEditTextContent(R.id.daima,Constants.GOODS_CODE,Constants.EMPTY_STRING,Constants.UNEDITABLE, InputType.TYPE_CLASS_NUMBER);
			name = setEditTextContent(R.id.name,Constants.GOODS_NAME,Constants.EMPTY_STRING,Constants.NECESSARY, InputType.TYPE_CLASS_TEXT|InputType.TYPE_TEXT_FLAG_MULTI_LINE);
			MyEditTextLayout layout = (MyEditTextLayout) findViewById(R.id.name);
			layout.setTextChangeListener(new TextChangeListener() {
				private int width;
				private int height;
				@Override
				public void afterTextChange(String after, String before) {
					if (after.length() == 0) {
						name.setHintTextColor(getResources().getColor(R.color.necessary));
					}
					if(name.getLineCount() >= 2 && !isTwoLine){
						width = name.getText().toString().length();
						android.widget.RelativeLayout.LayoutParams layoutParams = (android.widget.RelativeLayout.LayoutParams) name.getLayoutParams();
						layoutParams.addRule(RelativeLayout.BELOW, R.id.main);
						layoutParams.addRule(RelativeLayout.RIGHT_OF, 0);
						layoutParams.addRule(RelativeLayout.CENTER_VERTICAL, 0);
						height = layoutParams.height;
						name.setLayoutParams(layoutParams);
						name.setPadding(0, 0, 0, name.getPaddingBottom());
						name.requestLayout();
						
						RelativeLayout relativeLayout = (RelativeLayout)name.getParent();
						android.widget.LinearLayout.LayoutParams plp = (android.widget.LinearLayout.LayoutParams) relativeLayout.getLayoutParams();
						height = plp.height;
						plp.height = layoutParams.WRAP_CONTENT;
						relativeLayout.setLayoutParams(plp);
						relativeLayout.requestLayout();

						View main = findViewById(R.id.name).findViewById(R.id.main);
						android.widget.RelativeLayout.LayoutParams layoutParams2 = (android.widget.RelativeLayout.LayoutParams) main.getLayoutParams();
						layoutParams2.addRule(RelativeLayout.CENTER_VERTICAL, 0);
						main.setLayoutParams(layoutParams2);
						main.setPadding(0, main.getPaddingTop(), 0, 0);
						main.requestLayout();
						isTwoLine = true;
					}else if(name.getText().toString().length() < width){
						android.widget.RelativeLayout.LayoutParams layoutParams = (android.widget.RelativeLayout.LayoutParams) name.getLayoutParams();
						layoutParams.addRule(RelativeLayout.BELOW, 0);
						layoutParams.addRule(RelativeLayout.RIGHT_OF, R.id.main);
						layoutParams.addRule(RelativeLayout.CENTER_VERTICAL, RelativeLayout.TRUE);
						name.setLayoutParams(layoutParams);
						name.setPadding(0, name.getPaddingBottom(), 0, name.getPaddingBottom());
						name.requestLayout();
						
						RelativeLayout relativeLayout = (RelativeLayout)name.getParent();
						android.widget.LinearLayout.LayoutParams plp = (android.widget.LinearLayout.LayoutParams) relativeLayout.getLayoutParams();
						plp.height = height;
						relativeLayout.setLayoutParams(plp);
						relativeLayout.requestLayout();

						View main = findViewById(R.id.name).findViewById(R.id.main);
						android.widget.RelativeLayout.LayoutParams layoutParams2 = (android.widget.RelativeLayout.LayoutParams) main.getLayoutParams();
						layoutParams2.addRule(RelativeLayout.CENTER_VERTICAL, RelativeLayout.TRUE);
						main.setLayoutParams(layoutParams2);
						main.setPadding(0, main.getPaddingTop(), 0, main.getPaddingTop());
						main.requestLayout();
						isTwoLine = false;				
					}
				}
			});
			
			//本店没有， 总店有的情况下添加。
			goods = (GoodsVo)getIntent().getSerializableExtra(Constants.GOODS);
			if (searchStatus == Constants.ZHONGDIANYOU) {
				tiaomaEditView.setText(goods.getBarCode());
				daimaEditView.setText(goods.getInnerCode());
				name.setText(goods.getGoodsName());
			}
			
			jinhuoEditView = setEditTextContent(R.id.jinhuojia,Constants.GOODS_JINHUOJIA,Constants.EMPTY_STRING,Constants.NOT_NECESSARY, InputType.TYPE_NUMBER_FLAG_DECIMAL|InputType.TYPE_CLASS_NUMBER);
			
			setEditTextContent(R.id.lingshoujia,Constants.GOODS_LINGSHOUJIA,Constants.EMPTY_STRING,Constants.NECESSARY, InputType.TYPE_NUMBER_FLAG_DECIMAL|InputType.TYPE_CLASS_NUMBER);
			
			if (userShop.isLeaf()) {
				setEditTextContent(R.id.kucun,Constants.GOODS_KUCUN,Constants.EMPTY_STRING,Constants.NOT_NECESSARY, InputType.TYPE_CLASS_NUMBER);
				hide(R.id.tongbu);
			}else{
				tongbuSpinnerLayout = setSpinerConetent(R.id.tongbu, Constants.GOODS_TONGBU, Constants.EMPTY_STRING, tongbu, new Listener() {
					
					@Override
					public String confirm(int pos) {
						if (pos > 1) {
							tongbuShopId = shops.get(pos - 2).getShopId();
						}else{
							if (pos == 1) {
								tongbuShopId = userShop.getShopId();
							}else{
								tongbuShopId = null;
							}
						}
						currentShopPosition = pos;
						return shopsString.get(pos);
					}
					
					@Override
					public void cancel() {
						
					}
				});
				hide(R.id.kucun);
			}
			setEditTextContent(R.id.jianma,Constants.GOODS_JIANMA,Constants.EMPTY_STRING,Constants.NECESSARY,InputType.TYPE_CLASS_TEXT);
			pingyin = setEditTextContent(R.id.pingyinma,Constants.GOODS_PINYIN,Constants.EMPTY_STRING,Constants.UNEDITABLE,InputType.TYPE_CLASS_TEXT);
			sortSpinnerView = setSpinerConetent(R.id.sort, Constants.GOODS_CATEGORY, Constants.EMPTY_STRING, fenlei, new Listener() {

				@Override
				public String confirm(int pos) {
					currentCategory = categorys.get(pos);
					return currentCategory.name;
				}

				@Override
				public void cancel() {
				}
			});
			setEditTextContent(R.id.guige,Constants.GOODS_GUIGE,Constants.EMPTY_STRING,Constants.NOT_NECESSARY,InputType.TYPE_CLASS_TEXT);
			setEditTextContent(R.id.pinpan,Constants.GOODS_PINGPAI,Constants.EMPTY_STRING,Constants.NOT_NECESSARY,InputType.TYPE_CLASS_TEXT);
			setEditTextContent(R.id.chandi,Constants.GOODS_CHANDI,Constants.EMPTY_STRING,Constants.NOT_NECESSARY,InputType.TYPE_CLASS_TEXT);
			setEditTextContent(R.id.baozhiqi,Constants.GOODS_BAOZHIQI,Constants.EMPTY_STRING,Constants.NOT_NECESSARY,InputType.TYPE_CLASS_NUMBER);
			setEditTextContent(R.id.image,Constants.GOODS_IMAGE,Constants.EMPTY_STRING, Constants.EMPTY_STRING,InputType.TYPE_CLASS_TEXT);
			setEditTextContent(R.id.ticheng,Constants.GOODS_TICHENG,Constants.EMPTY_STRING,Constants.NOT_NECESSARY,InputType.TYPE_NUMBER_FLAG_DECIMAL|InputType.TYPE_CLASS_NUMBER);
			jifenLayout = setCheckBoxContent(R.id.jifen,  Constants.GOODS_JIFEN ,false);
			youhuiLayout = setCheckBoxContent(R.id.youhui, Constants.GOODS_YOUHUI ,false);
			findViewById(R.id.image).findViewById(R.id.secend).setEnabled(false);
			setTitleText(Constants.TITLE_ADD);
			Button button = (Button) findViewById(R.id.delete);
			button.setBackgroundResource(R.drawable.goods_detail_green_btn);
			button.setText(Constants.CONTINUS_ADD);
			button.setOnClickListener(this);
			noImage();
			switchToEditMode();
		}else{
			goods = (GoodsVo)getIntent().getSerializableExtra(Constants.GOODS);
			tiaomaEditView = setEditTextContent(R.id.tiaoma,Constants.BAR_CODE,goods.getBarCode(),Constants.NOT_NECESSARY,InputType.TYPE_CLASS_NUMBER);
			daimaEditView = setEditTextContent(R.id.daima,Constants.GOODS_CODE,goods.getInnerCode(),Constants.UNEDITABLE,InputType.TYPE_CLASS_NUMBER);
			name = setEditTextContent(R.id.name,Constants.GOODS_NAME,goods.getGoodsName(),Constants.NECESSARY, InputType.TYPE_CLASS_TEXT|InputType.TYPE_TEXT_FLAG_MULTI_LINE);
			MyEditTextLayout layout = (MyEditTextLayout) findViewById(R.id.name);
			layout.setTextChangeListener(new TextChangeListener() {
				private int width;
				private int height;
				@Override
				public void afterTextChange(String after, String before) {
					if (after.length() == 0) {
						name.setHintTextColor(getResources().getColor(R.color.necessary));
					}
					if(name.getLineCount() >= 2 && !isTwoLine){
						width = name.getText().toString().length();
						android.widget.RelativeLayout.LayoutParams layoutParams = (android.widget.RelativeLayout.LayoutParams) name.getLayoutParams();
						layoutParams.addRule(RelativeLayout.BELOW, R.id.main);
						layoutParams.addRule(RelativeLayout.RIGHT_OF, 0);
						layoutParams.addRule(RelativeLayout.CENTER_VERTICAL, 0);
						height = layoutParams.height;
						name.setLayoutParams(layoutParams);
						name.setPadding(0, 0, 0, name.getPaddingBottom());
						name.requestLayout();
						
						RelativeLayout relativeLayout = (RelativeLayout)name.getParent();
						android.widget.LinearLayout.LayoutParams plp = (android.widget.LinearLayout.LayoutParams) relativeLayout.getLayoutParams();
						height = plp.height;
						plp.height = layoutParams.WRAP_CONTENT;
						relativeLayout.setLayoutParams(plp);
						relativeLayout.requestLayout();

						View main = findViewById(R.id.name).findViewById(R.id.main);
						android.widget.RelativeLayout.LayoutParams layoutParams2 = (android.widget.RelativeLayout.LayoutParams) main.getLayoutParams();
						layoutParams2.addRule(RelativeLayout.CENTER_VERTICAL, 0);
						main.setLayoutParams(layoutParams2);
						main.setPadding(0, main.getPaddingTop(), 0, 0);
						main.requestLayout();
						isTwoLine = true;
					}else if(name.getText().toString().length() < width){
						android.widget.RelativeLayout.LayoutParams layoutParams = (android.widget.RelativeLayout.LayoutParams) name.getLayoutParams();
						layoutParams.addRule(RelativeLayout.BELOW, 0);
						layoutParams.addRule(RelativeLayout.RIGHT_OF, R.id.main);
						layoutParams.addRule(RelativeLayout.CENTER_VERTICAL, RelativeLayout.TRUE);
						name.setLayoutParams(layoutParams);
						name.setPadding(0, name.getPaddingBottom(), 0, name.getPaddingBottom());
						name.requestLayout();
						
						RelativeLayout relativeLayout = (RelativeLayout)name.getParent();
						android.widget.LinearLayout.LayoutParams plp = (android.widget.LinearLayout.LayoutParams) relativeLayout.getLayoutParams();
						plp.height = height;
						relativeLayout.setLayoutParams(plp);
						relativeLayout.requestLayout();

						View main = findViewById(R.id.name).findViewById(R.id.main);
						android.widget.RelativeLayout.LayoutParams layoutParams2 = (android.widget.RelativeLayout.LayoutParams) main.getLayoutParams();
						layoutParams2.addRule(RelativeLayout.CENTER_VERTICAL, RelativeLayout.TRUE);
						main.setLayoutParams(layoutParams2);
						main.setPadding(0, main.getPaddingTop(), 0, main.getPaddingTop());
						main.requestLayout();
						isTwoLine = false;				
					}
				}
			});
//			name.setText(goods.getGoodsName());
			
			setEditTextContent(R.id.jinhuojia,Constants.GOODS_JINHUOJIA,goods.getPurchasePrice(),Constants.NOT_NECESSARY,InputType.TYPE_NUMBER_FLAG_DECIMAL|InputType.TYPE_CLASS_NUMBER);
			
			setEditTextContent(R.id.lingshoujia,Constants.GOODS_LINGSHOUJIA,goods.getPetailPrice(),Constants.NECESSARY, InputType.TYPE_NUMBER_FLAG_DECIMAL|InputType.TYPE_CLASS_NUMBER);
			findViewById(R.id.lingshoujia).findViewById(R.id.secend).setEnabled(true);

			if (userShop.isLeaf()) {
				setEditTextContent(R.id.kucun,Constants.GOODS_KUCUN,Constants.EMPTY_STRING,Constants.NOT_NECESSARY,InputType.TYPE_CLASS_NUMBER);
				if (userShop.getType() == ShopVo.MENDIAN) {
					findViewById(R.id.kucun).findViewById(R.id.secend).setEnabled(true);
				}
				hide(R.id.tongbu);
			}else{
				tongbuSpinnerLayout = setSpinerConetent(R.id.tongbu, Constants.GOODS_TONGBU, Constants.EMPTY_STRING, tongbu, new Listener() {

					@Override
					public String confirm(int pos) {
						if (pos > 1) {
							tongbuShopId = shops.get(pos - 2).getShopId();
						}else{
							if (pos == 1) {
								tongbuShopId = userShop.getShopId();
							}else{
								tongbuShopId = null;
							}
						}
						currentShopPosition = pos;
						return shopsString.get(pos);
					}

					@Override
					public void cancel() {

					}
				});
				hide(R.id.kucun);
			}

			setEditTextContent(R.id.jianma,Constants.GOODS_JIANMA,goods.getShortCode(),Constants.NECESSARY, InputType.TYPE_CLASS_TEXT);
			pingyin = setEditTextContent(R.id.pingyinma,Constants.GOODS_PINYIN,goods.getSpell(),Constants.UNEDITABLE, InputType.TYPE_CLASS_TEXT);

			sortSpinnerView = setSpinerConetent(R.id.sort, Constants.GOODS_CATEGORY, goods.getCategoryName(), fenlei, new Listener() {

				@Override
				public String confirm(int pos) {
					currentCategory = categorys.get(pos);
					return currentCategory.name;
				}

				@Override
				public void cancel() {
				}
			});
			
			if (mode.equals(Constants.EDIT)) {
				findViewById(R.id.sort).findViewById(R.id.secend).setEnabled(userShop.canEdit());
			}

			setEditTextContent(R.id.guige,Constants.GOODS_GUIGE,goods.getSpecification(),Constants.NOT_NECESSARY, InputType.TYPE_CLASS_TEXT);
			setEditTextContent(R.id.pinpan,Constants.GOODS_PINGPAI,goods.getBrandName(),Constants.NOT_NECESSARY, InputType.TYPE_CLASS_TEXT);
			setEditTextContent(R.id.chandi,Constants.GOODS_CHANDI,goods.getOrigin(),Constants.NOT_NECESSARY, InputType.TYPE_CLASS_TEXT);
			setEditTextContent(R.id.baozhiqi,Constants.GOODS_BAOZHIQI,Constants.EMPTY_STRING + goods.getPeriod(),Constants.NOT_NECESSARY, InputType.TYPE_CLASS_NUMBER);
			setEditTextContent(R.id.image,Constants.GOODS_IMAGE,Constants.EMPTY_STRING,Constants.EMPTY_STRING, InputType.TYPE_CLASS_TEXT);
			findViewById(R.id.image).findViewById(R.id.secend).setEnabled(false);
			
			setEditTextContent(R.id.ticheng,Constants.GOODS_TICHENG,goods.getPercentage(),Constants.EMPTY_STRING, InputType.TYPE_NUMBER_FLAG_DECIMAL|InputType.TYPE_CLASS_NUMBER );

			jifenLayout = setCheckBoxContent(R.id.jifen, Constants.GOODS_JIFEN ,goods.hasDegree());
			youhuiLayout = setCheckBoxContent(R.id.youhui, Constants.GOODS_YOUHUI ,goods.isSales());
			
			Button button = (Button) findViewById(R.id.delete);
			button.setBackgroundResource(R.drawable.goods_detail_red_btn);
			button.setText(Constants.DELETE);
			button.setOnClickListener(this);
			ImageLoader.getInstance().displayImage(goods.getFileNameBig(), image, new ImageLoadingListener() {
				
				@Override
				public void onLoadingStarted(String imageUri, View view) {
					
				}
				
				@Override
				public void onLoadingFailed(String imageUri, View view,
						FailReason failReason) {
					noImage();
				}
				
				@Override
				public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
					if (loadedImage == null) {
						noImage();
					}else{
						hasImage();
					}
				}
				
				@Override
				public void onLoadingCancelled(String imageUri, View view) {
				}
			});
			setBack();
			hideRight();
		}
		findViewById(R.id.image).findViewById(R.id.secend).setEnabled(false);
		
		
		findViewById(R.id.scan).setOnClickListener(this);
		getCategoryList();
		getShop(false);
		daimaEditView.setEnabled(false);
		daimaEditView.setFocusable(false);
		daimaEditView.setFocusableInTouchMode(false);
		pingyin.setEnabled(false);
		pingyin.setFocusable(false);
		pingyin.setFocusableInTouchMode(false);
	}


	private void hide(int tongbu2) {
		findViewById(tongbu2).setVisibility(View.GONE);
	}

	private void hasImage() {
		image.setOnClickListener(null);
		deleteImage.setVisibility(View.VISIBLE);
		deleteImage.setOnClickListener(this);
	}

	private void noImage() {
		isChanged = false;
		image.setImageResource(R.drawable.goods_image_add);
		image.setOnClickListener(this);
		deleteImage.setVisibility(View.GONE);
	}

	/**
	 * Gets the shop.
	 * 
	 * @param next
	 *            the next
	 * @return the shop
	 */
	private void getShop(boolean next){
		RequestParameter params = new RequestParameter(true);
		params.setParam(Constants.SHOP_ID, RetailApplication.getShopVo().getShopId());
		if (!next) {
			currentPage = Constants.PAGE_SIZE_OFFSET;
		}
		params.setParam(Constants.PAGE,currentPage ++);
		params.setUrl(Constants.SHOP_LIST_URL);
		
		new AsyncHttpPost(params, new RequestResultCallback() {


			@Override
			public void onSuccess(String str) {
				JsonUtil ju = new JsonUtil(str);
				if (ju.isError(GoodsDetailActivity.this)) {
					return;
				}
				shops = (List<ShopVo>) ju.get(Constants.All_SHOP, new TypeToken<List<ShopVo>>(){}.getType());
				shopsString = new ArrayList<String>();
				shopsString.add(Constants.NO_TONGBU);
				shopsString.add(Constants.TONGBU);
				for (ShopVo shop : shops) {
					String shopName = shop.getShopName();
					shopsString.add(shopName);
				}
				tongbu.setData(shopsString);
				tongbuShopId = null;
				tongbuSpinnerLayout.setValue(shopsString.get(0), true);
				tongbuSpinnerLayout.clearSaveFlag();
				switchToBackMode();
			}
			
			@Override
			public void onFail(Exception e) {
				e.printStackTrace();
			}
		}).execute();
	}

	/**
	 * Gets the category list.
	 * 
	 * @return the category list
	 */
	private void getCategoryList() {
		RequestParameter params = new RequestParameter(true);
		params.setUrl(Constants.CATEGORY_LIST_URL);
		new AsyncHttpPost(params, new RequestResultCallback() {
			@Override
			public void onSuccess(String str) {
				JsonUtil ju = new JsonUtil(str);
				if (ju.isError(GoodsDetailActivity.this)) {
					return;
				}
//				System.out.println(str);
//				JsonObject jo = new JsonParser().parse(str).getAsJsonObject();
//				JsonElement jsonElement = jo.get("returnCode");
//				String returnCode = null;
//				if (jsonElement != null) {
//					returnCode = jsonElement.getAsString();
//				}
//				if (returnCode == null || !returnCode.equals("success")) {
//					ToastUtil.showShortToast(GoodsDetailActivity.this, "获取商品目录失败");
//					return;
//				}
				List<CategoryVo> categoryVo =  (List<CategoryVo>) ju.get(Constants.CATEGORY_LIST, new TypeToken<List<CategoryVo>>(){}.getType());
				categorys = new ArrayList<Category>();
				getCategory(categoryVo,Constants.EMPTY_STRING,categorys);
				List<String> categorysString = new ArrayList<String>();
				for (Category item : categorys) {
					categorysString.add(item.name);
				}
				if (mode.equals(Constants.ADD)) {
					currentCategory = null;
				}else{
					for (Category category : categorys) {
						if (category.id.equals(goods.getCategoryId())) {
							currentCategory = category;
							sortSpinnerView.setValue(currentCategory.name, true);
							sortSpinnerView.clearSaveFlag();
							switchToBackMode();
						}
					}
				}
				fenlei.setData(categorysString);
			}

			@Override
			public void onFail(Exception e) {
				e.printStackTrace();
			}
		}).execute();
	}
	
	/**
	 * Gets the category.
	 * 
	 * @param categoryVo
	 *            the category vo
	 * @param parent
	 *            the parent
	 * @param categorys
	 *            the categorys
	 * @return the category
	 */
	private void getCategory(List<CategoryVo> categoryVo,
					String parent, List<Category> categorys) {
		for (CategoryVo item : categoryVo) {
			
			if (item.getCategoryList() == null) {
				Category category = new Category();
				if (parent.length() != 0) {
					category.parents = parent.substring(0, parent.length() - 1);
				}
				category.name = item.getName();
				category.id = item.getId();
				categorys.add(category);
			}else{
				getCategory(item.getCategoryList(), parent + item.getName() + "-", categorys);
			}
		}
	}

	/**
	 * Sets the check box content.
	 * 
	 * @param id
	 *            the id
	 * @param label
	 *            the label
	 * @param b
	 *            the b
	 */
	private MyCheckBoxLayout setCheckBoxContent(int id, String label, boolean b) {
		MyCheckBoxLayout layout = (MyCheckBoxLayout) findViewById(id);
		layout.init(label, b);
		
		if (mode.equals(Constants.EDIT)) {
			layout.setEditable(userShop.canEdit());
		}
		layout.clearSaveFlag();
		return layout;
	}
	
	/* (non-Javadoc)
	 * @see com.dihuo.twodfire.retail.activity.goodsmanager.GoodsManagerBaseActivity#switchToEditMode()
	 */
	@Override
	protected void switchToEditMode() {
		super.switchToEditMode();
		findViewById(R.id.title_right).setOnClickListener(this);
		findViewById(R.id.title_left).setOnClickListener(this);
		edited = true;
	}

	/**
	 * Sets the spiner conetent.
	 * 
	 * @param tongbu
	 *            the tongbu
	 * @param label
	 *            the label
	 * @param value
	 *            the value
	 */
	private MySpinnerLayout setSpinerConetent(int tongbu, String label, String value, OneColumnSpinner spinner, Listener listener) {
		MySpinnerLayout layout = (MySpinnerLayout) findViewById(tongbu);
		layout.init(label, value, spinner);
		layout.clearSaveFlag();
		layout.setListener(listener);
		return layout;
	}

	/**
	 * Sets the edit text content.
	 * 
	 * @param id
	 *            the id
	 * @param label
	 *            the lable
	 * @param content
	 *            the content
	 * @param hint
	 *            the hint
	 */
	private EditText setEditTextContent(int id, String label, String content, final String hint, int inputType) {
		
		MyEditTextLayout layout = (MyEditTextLayout) findViewById(id);
		layout.init(label, content, hint, inputType);
		if (mode.equals(Constants.EDIT)) {
			layout.setEditable(userShop.canEdit());
		}
		layout.clearSaveFlag();
		return layout.getInputText();
	}

	/* (non-Javadoc)
	 * @see android.view.View.OnClickListener#onClick(android.view.View)
	 */
	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.title_right:
			save();
			break;
			
		case R.id.title_left:
			finish();
			break;
			
		case R.id.imageView:
			chooseImage();
			break;
		case R.id.deleteImage:
			noImage();
			break;
			
		case R.id.delete:
			if (mode.equals(Constants.ADD) ) {
				continusAdd();
			}else{
				deleteGoods();
			}
			break;
			
		case R.id.scan:
			startActivityForResult(new Intent(this, CaptureActivity.class), 10086);
			break;
			
		case R.id.from_ablum:
			popupWindow.dismiss();
			Intent photoPickerIntent = new Intent( Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
			photoPickerIntent.setType(Constants.IMAGE_INTENT);
			photoPickerIntent.putExtra(Constants.OUTPUT_FORMAT, Bitmap.CompressFormat.JPEG.toString());
			photoPickerIntent.putExtra(MediaStore.EXTRA_OUTPUT, getTempUri());
			startActivityForResult(photoPickerIntent, IMAGE_REQUEST_CODE);
			break;
			
		case R.id.from_camera:
			popupWindow.dismiss();
			Intent intentFromCapture = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
			intentFromCapture.putExtra(Constants.OUTPUT_FORMAT,Bitmap.CompressFormat.JPEG.toString());
			intentFromCapture.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 0);
			File path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);  
			File tempFile = new File(path,Constants.TEMP_PHOTO_FILE);
			// 判断存储卡是否可以用，可用进行存储
			intentFromCapture.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(tempFile));
			startActivityForResult(intentFromCapture, CAMERA_REQUEST_CODE);
			break;
			
		default:
			break;
			
		}
	}
	
	
	
	private void continusAdd() {
		findViewById(R.id.scan).setVisibility(View.VISIBLE);
	}

	private void deleteGoods() {
		RequestParameter params = new RequestParameter(true);
		params.setUrl(Constants.DELETE_URL);
		params.setParam(Constants.SHOP_ID, shop.getShopId());
		params.setParam(Constants.GOODS_ID, goods.getGoodsId());
		getProgressDialog().show();
		new AsyncHttpPost(params, new RequestResultCallback() {
			
			@Override
			public void onSuccess(String str) {
				getProgressDialog().hide();
				JsonUtil ju = new JsonUtil(str);
				if (ju.isError(GoodsDetailActivity.this)) {
					return;
				}
//				JsonObject jo = new JsonParser().parse(str).getAsJsonObject();
//				JsonElement jsonElement = jo.get("returnCode");
//				String returnCode = null;
//				if (jsonElement != null) {
//					returnCode = jsonElement.getAsString();
//				}
//				if (returnCode == null || !returnCode.equals("success")) {
//					ToastUtil.showShortToast(GoodsDetailActivity.this, "删除失败");
//					return;
//				}
				ToastUtil.showShortToast(GoodsDetailActivity.this, Constants.DELETE_SUCCESS);
				finish();
			}
			
			@Override
			public void onFail(Exception e) {
				ToastUtil.showShortToast(GoodsDetailActivity.this, Constants.DELETE_FAIL);
				e.printStackTrace();
				return;
			}
		}).execute();
	}


	private static final int IMAGE_REQUEST_CODE = 20;
	private static final int CAMERA_REQUEST_CODE = 30;
	private static final int RESULT_REQUEST_CODE = 10;
	
	private Uri getTempUri() {
		return Uri.fromFile(getTempFile());
	}
	
	
	private File getTempFile() {
		if (Environment.getExternalStorageState().equals(
				Environment.MEDIA_MOUNTED)) {
			File file = new File(Environment.getExternalStorageDirectory(), Constants.TEMP_PHOTO_FILE);
			try {
				file.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return file;
		} else {
			return null;
		}
	}

	private void chooseImage() {
		
		InputMethodManager imm = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);

		View view = LayoutInflater.from(this).inflate(R.layout.get_image, null);
		view.findViewById(R.id.from_ablum).setOnClickListener(this);
		view.findViewById(R.id.from_camera).setOnClickListener(this);
		view.findViewById(R.id.cancel).setOnClickListener(this);
		if (popupWindow == null) {
			popupWindow = new PopupWindow(view, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, true);
		}
		popupWindow.setAnimationStyle(R.style.anim_menu_bottombar);
		WindowManager.LayoutParams lp = getWindow().getAttributes();  
		lp.alpha = 0.5f;
		getWindow().setAttributes(lp);  
		popupWindow.setFocusable(true);
		popupWindow.setTouchable(true);
		popupWindow.setOutsideTouchable(true);
		ColorDrawable dw = new ColorDrawable(0x00);
		popupWindow.setBackgroundDrawable(dw);
		popupWindow.setOnDismissListener(new OnDismissListener() {

			@Override
			public void onDismiss() {
				WindowManager.LayoutParams lp = GoodsDetailActivity.this.getWindow().getAttributes();  
				lp.alpha = 1f;
				getWindow().setAttributes(lp);  
			}
		});
		popupWindow.showAtLocation(findViewById(R.id.root), Gravity.BOTTOM, 0, 0);

	}


	/**
	 * 裁剪图片方法实现
	 * 
	 * @param uri
	 */
	public void startPhotoZoom(Uri uri) {
		Intent intent = new Intent("com.android.camera.action.CROP");
		intent.setDataAndType(uri, "image/*");
		// 设置裁剪
		// aspectX aspectY 是宽高的比例
		intent.putExtra("aspectX", 116);
		intent.putExtra("aspectY", 77);

		// outputX outputY 是裁剪图片宽高
		intent.putExtra("outputX", 580);
		intent.putExtra("outputY", 385);
		intent.putExtra("scale", true);
		intent.putExtra("return-data", false);
		intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
		intent.putExtra("outputFormat", Bitmap.CompressFormat.JPEG.toString());
		intent.putExtra("noFaceDetection", true); // no face detection
		startActivityForResult(intent, RESULT_REQUEST_CODE);
	}
	
	
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// 结果码不等于取消时候
		if (resultCode != RESULT_CANCELED) {
			switch (requestCode) {
			case IMAGE_REQUEST_CODE:
//				file = new File(data.getData().getPath());
//				Bitmap bitmap = decodeUriAsBitmap(data.getData());
//				final File tempFile = new File(getCacheDir(), Constants.TEMPFILE + System.currentTimeMillis() + Constants.PNG);
//				try {
//					bitmap.compress(CompressFormat.PNG, 80, new FileOutputStream(tempFile));
//				} catch (FileNotFoundException e1) {
//					e1.printStackTrace();
//				}
//				image.setImageBitmap(bitmap);
//				
				startPhotoZoom(data.getData());
				break;
			case CAMERA_REQUEST_CODE:
				File path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);  
				File tempFile2 = new File(path,Constants.TEMP_PHOTO_FILE);
				startPhotoZoom(Uri.fromFile(tempFile2));
//				file = tempFile2;
//				Bitmap bitmap2 = decodeUriAsBitmap(Uri.fromFile(tempFile2));
//
//				image.setImageBitmap(bitmap2);
				
				break;
				
			case RESULT_REQUEST_CODE: // 图片缩放完成后
				if (data != null) {
					getImageToView(data);
				}
				break;
				
			case 10086:
				search(data.getStringExtra(Constants.DEVICE_CODE));
				break;
			}
			hasImage();
		}
		super.onActivityResult(requestCode, resultCode, data);
	}
 
	/**
	 * 保存裁剪之后的图片数据
	 * 
	 * @param picdata
	 */
	private void getImageToView(Intent data) {
		Bundle extras = data.getExtras();
		if (extras != null) {
			photo = decodeUriAsBitmap(imageUri);// decode bitmap
			image.setImageBitmap(photo);
			isChanged = true;
		}
		switchToEditMode();
	}
	
	/**
	 * Search.
	 */
	private void search(String code) {
		getProgressDialog().show();
		if (code == null || code.length() == 0) {
			return;
		}
		RequestParameter params = new RequestParameter(true);
		params.setParam(Constants.SHOP_ID, userShop.getShopId());
		params.setParam(Constants.SEARCH_CODE, code);
		params.setParam(Constants.PAGE_SIZE, Constants.PAGE_SIZE_OFFSET);
		params.setUrl(Constants.GOODS_LIST_URL);
		new AsyncHttpPost(params, new RequestResultCallback() {
			
			@Override
			public void onSuccess(String str) {
				getProgressDialog().dismiss();
				JsonUtil ju = new JsonUtil(str);
				if (ju.isError(GoodsDetailActivity.this)) {
					return;
				}
//				JsonObject jo = new JsonParser().parse(str).getAsJsonObject();
//				
//				JsonElement jsonElement = jo.get("returnCode");
//				String returnCode = null;
//				if (jsonElement != null) {
//					returnCode = jsonElement.getAsString();
//				}
//				if (returnCode == null || !returnCode.equals("success")) {
//					ToastUtil.showShortToast(GoodsDetailActivity.this, "获取失败");
//					return;
//				}
				ArrayList<GoodsVo> goods = (ArrayList<GoodsVo>) ju.get(Constants.GOODS_LIST, new TypeToken<List<GoodsVo>>(){}.getType());
				
				//TODO
				startActivity(new Intent(GoodsDetailActivity.this, GoodsListWithImageActivity.class).putExtra("goods", goods)
						.putExtra("shop", userShop));
			}
			
			@Override
			public void onFail(Exception e) {
				getProgressDialog().dismiss();
				e.printStackTrace();
			}
		}).execute();
	}
	
	Uri imageUri = getTempUri(); // The Uri to store the big bitmap

	File file = null;
	private Bitmap decodeUriAsBitmap(Uri uri) {
		Bitmap bitmap = null;
		try {
			Options options = new Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeStream(getContentResolver()
					.openInputStream(uri), null, options);
			
			int width = options.outWidth;
			int height = options.outHeight;
			int samplerSize = width * height / (1000 * 500);
			
			options.inJustDecodeBounds = false;
			options.inSampleSize = samplerSize;
			
			bitmap = BitmapFactory.decodeStream(getContentResolver()
					.openInputStream(uri), null, options);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return null;
		}
		return bitmap;
	}


	/**
	 * Save.
	 */
	private void save() {
		String goods = genGoods();
		if (goods == null) {
			return;
		}
		RequestParameter params = new RequestParameter(true);
		params.setParam(Constants.SHOP_ID, RetailApplication.getShopVo().getShopId());
		try {
			params.setParam(Constants.GOODS, new JSONObject(goods.toString()));
		} catch (JSONException e1) {
			e1.printStackTrace();
		}
		params.setParam(Constants.OPT_TYPE, mode);
		params.setUrl(Constants.GOODS_SAVE_URL);
		
		final ProgressDialog pd = ProgressDialog.show(this, null, Constants.WAIT_SAVE_GOODS, true, false);
		new AsyncHttpPost(params, new RequestResultCallback() {
			
			@Override
			public void onSuccess(String str) {
				pd.dismiss();
				JsonUtil ju = new JsonUtil(str);
				if (ju.isError(GoodsDetailActivity.this)) {
					return;
				}
				ToastUtil.showShortToast(GoodsDetailActivity.this, Constants.GOODS_SAVE_SUCCESS);
				finish();
			}
			
			@Override
			public void onFail(Exception e) {
				pd.dismiss();
				ToastUtil.showUnknowError(GoodsDetailActivity.this);
				e.printStackTrace();
			}
		}).execute();
	}

	/**
	 * Gen goods.
	 * 
	 * @return the string
	 */
	private String genGoods() {
		GoodsVo goods = null;
		if (this.goods == null) {
			goods = new GoodsVo();
		}else{
			try {
				goods = (GoodsVo) this.goods.clone();
			} catch (CloneNotSupportedException e) {
				e.printStackTrace();
			}
		}
		
		String name = getValueStringFromTextView(R.id.name, true, Constants.INPUT_GOODS_NAME);
		String lingshou = getValueStringFromTextView(R.id.lingshoujia, true, Constants.INPUT_GOODS_LINGSHOUJIA);
		
		if (name == null || lingshou == null ) {
			return null;
		}else{
			goods.setGoodsName(name);
			try {
				float temp = Float.parseFloat(lingshou);
				if (temp < 0) {
					ToastUtil.showShortToast(this, Constants.INPUT_RIGHT_LINGSHOUJI);
					return null;
				}
				goods.setPetailPrice(lingshou);
			} catch (Exception e) {
				ToastUtil.showShortToast(this, Constants.INPUT_RIGHT_LINGSHOUJI);
				e.printStackTrace();
				return null;
			}
		}
		
		String tiaoma = getValueStringFromTextView(R.id.tiaoma, false, null);
		try {
			float temp = Float.parseFloat(tiaoma);
			if (temp < 0 || tiaoma.length() != 13) {
				ToastUtil.showShortToast(this, Constants.INPUT_RIGHT_TIAOMA);
				return null;
			}
		} catch (Exception e) {
			ToastUtil.showShortToast(this, Constants.INPUT_RIGHT_TIAOMA);
			e.printStackTrace();
			return null;
		}
		goods.setBarCode(tiaoma);
		
//		String daima = getValueStringFromTextView(R.id.daima, false, null);
//		try {
//			float temp = Float.parseFloat(daima);
//			if (temp < 0 || daima.length() != 13) {
//				ToastUtil.showShortToast(this, Constants.INPUT_RIGHT_DAIMA);
//				return null;
//			}
//		} catch (Exception e) {
//			ToastUtil.showShortToast(this, Constants.INPUT_RIGHT_DAIMA);
//			e.printStackTrace();
//			return null;
//		}
//		goods.setInnerCode(daima);
		
		String jinhuo = getValueStringFromTextView(R.id.jinhuojia, false, null);
		if (jinhuo != null && jinhuo.length() != 0) {
			try {
				float temp = Float.valueOf(jinhuo);
				if (temp < 0) {
					ToastUtil.showShortToast(this, Constants.INPUT_RIGHT_JINHUO);
					return null;
				}
				goods.setPurchasePrice(jinhuo);
			} catch (Exception e) {
				e.printStackTrace();
				ToastUtil.showShortToast(this, Constants.INPUT_RIGHT_JINHUO);
				return null;
			}
		}else{
			goods.setPurchasePrice(null);
		}
		
		if (userShop.isLeaf()) {
			String kucun = getValueStringFromTextView(R.id.kucun, false, null);
			if (kucun == null) {
				ToastUtil.showShortToast(this, Constants.INPUT_RIGHT_KUCUN);
				return null;
			}
			int kucunInt = 0;
			try {
				kucunInt = Integer.parseInt(kucun);
				if (kucunInt < 0) {
					ToastUtil.showShortToast(this, Constants.INPUT_RIGHT_KUCUN);
					return null;
				}
			} catch (Exception e) {
				ToastUtil.showShortToast(this, Constants.INPUT_RIGHT_KUCUN);
				e.printStackTrace();
				return null;
			}
			goods.setNumber(kucunInt);
		}else{
			goods.setSynShopId(tongbuShopId);
		}
		
		String jianma = getValueStringFromTextView(R.id.jianma, false, null);
		if (jianma == null || jianma.length() == 0) {
			ToastUtil.showShortToast(this, Constants.INPUT_JIANMA);
			return null;
		}
		goods.setShortCode(jianma);
		
//		String pinyin = getValueStringFromTextView(R.id.pingyinma, false, null);
//		goods.setSpell(pinyin);
		
		if (currentCategory != null) {
			goods.setCategoryId(currentCategory.id);
			goods.setCategoryName(currentCategory.name);
		}
		
		String guige = getValueStringFromTextView(R.id.guige, false, null);
		goods.setSpecification(guige);
		
		String pinpai = getValueStringFromTextView(R.id.pinpan, false, null);
		goods.setBrandName(pinpai);
		
		String chandi = getValueStringFromTextView(R.id.chandi, false, null);
		goods.setOrigin(chandi);
		
		String baozhiqi = getValueStringFromTextView(R.id.baozhiqi, false, null);
		if (baozhiqi != null) {
			try {
				Integer valueOf = Integer.valueOf(baozhiqi);
				if (valueOf < 0) {
					ToastUtil.showShortToast(this, Constants.GOODS_PERIOD);
					return null;
				}
				goods.setPeriod(valueOf);
			} catch (Exception e) {
				ToastUtil.showShortToast(this, Constants.GOODS_PERIOD);
				return null;
			}
		}
		
		if (deleteImage.getVisibility() == View.VISIBLE && isChanged) {
			goods.setFile(bitmap2Bytes(photo));
			goods.setFileName(goods.getGoodsName() + Constants.PNG);
		}
		
	
		String bili = getValueStringFromTextView(R.id.ticheng, false, null);
		if (bili != null) {
			try {
				Float valueOf = Float.parseFloat(getValueStringFromTextView(R.id.ticheng, false, null));
				if(valueOf < 0 || valueOf > 100){
					ToastUtil.showShortToast(this, Constants.GOODS_PERIOD);
					return null;
				}
				goods.setPercentage(String.valueOf((valueOf / 100)));
			} catch (Exception e) {
				ToastUtil.showShortToast(this, Constants.GOODS_PERIOD);
				return null;
			}
		}
		
		goods.setHasDegree(jifenLayout.isChecked());
		
		goods.setIsSales(youhuiLayout.isChecked());
		
		String baseId = goods.getBaseId();
		if (baseId != null && baseId.length() != 32) {
			for (int i = baseId.length(); i < 32; ++i) {
				baseId = Constants.ZERO + baseId;
			}
			goods.setBaseId(baseId);
		}

		String brandId = goods.getBrandId();
		if (brandId != null && brandId.length() != 32) {
			for (int i = brandId.length(); i < 32; ++i) {
				brandId = Constants.ZERO + brandId;
			}
			goods.setBaseId(brandId);
		}

		String unitId = goods.getUnitId();
		if (unitId != null && unitId.length() != 32) {
			for (int i = unitId.length(); i < 32; ++i) {
				unitId = Constants.ZERO + unitId;
			}
			goods.setBaseId(unitId);
		}
		goods.setUnitId(null);
		goods.setMemo(null);
		goods.setBrandName("vvv");
		goods.setBrandId(null);
//		goods.setBrandId("e708c48ef0e74cd889c3acbb39d17744");
		return new GsonBuilder().serializeNulls().create().toJson(goods);
	}


	private byte[] bitmap2Bytes(Bitmap input) {
		if (input == null) {
			return null;
		}
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		input.compress(CompressFormat.PNG, 80, baos);
		return baos.toByteArray();
	}

	/**
	 * Gets the value string from text view.
	 * 
	 * @param tiaoma
	 *            the tiaoma
	 * @param b
	 *            the b
	 * @param string
	 *            the string
	 * @return the value string from text view
	 */
	private String getValueStringFromTextView(int id, boolean b, String string) {
		String content = ((TextView)findViewById(id).findViewById(R.id.secend)).getText().toString();
		if (content.length() == 0) {
			if (b) {
				ToastUtil.showShortToast(this, string);
			}
			return null;
		}
		return content;
	}
	
}

 