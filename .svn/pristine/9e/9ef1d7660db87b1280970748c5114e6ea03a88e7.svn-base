package com.dfire.retail.app.manage.activity.stockmanager;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import android.annotation.SuppressLint;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.TextView;

import com.dfire.retail.app.manage.R;
import com.dfire.retail.app.manage.activity.TitleActivity;
import com.dfire.retail.app.manage.adapter.StockCheckRecordDetailAdapter;
import com.dfire.retail.app.manage.data.StockCheckRecordDetailVo;
import com.dfire.retail.app.manage.data.StockCheckRecordVo;
import com.dfire.retail.app.manage.global.Constants;
import com.dfire.retail.app.manage.network.AsyncHttpPost;
import com.dfire.retail.app.manage.network.RequestParameter;
import com.dfire.retail.app.manage.network.RequestResultCallback;
import com.dfire.retail.app.manage.util.JsonUtil;
import com.dfire.retail.app.manage.util.ToastUtil;
import com.dfire.retail.app.manage.wheel.widget.BaseListView;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;

/**
 * 库存管理-盘点记录结果报告
 * @author ys
 *
 */
@SuppressLint("SimpleDateFormat")
public class StockCheckRecordResultActivity extends TitleActivity  {

	private ProgressDialog progressDialog;
	
	private StockCheckRecordDetailVo stockCheckRecordDetailVo;
	
	private int currentPage=1;
	
	private String stockCheckId;
	
	private TextView stockCheckManName,shop_Name,select_time;
	
	private StockCheckRecordVo stockCheckRecordVo;
	
	private String shopId,shopName;
	
	private StockCheckRecordDetailAdapter checkRecordDetailAdapter;
	
	private BaseListView checkRecordDetail;
	
	private List<StockCheckRecordDetailVo> checkRecordDetailVos;
	
	private Integer pageSize = 0;
	
	private boolean nodata;
	
	private boolean is_divPage;// 是否进行分页操作
	
    private TextView stockTotalCount,stockRealCount,exhibitCount,stockMoney,exhibit;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_stock_check_records_result);
		setTitleText("盘点结果报告");
		showBackbtn();
		findView();
	}
	/**
	 * 得到控件
	 */
	public void findView(){
		this.shopId = getIntent().getStringExtra("shopId").toString();
		this.shopName = getIntent().getStringExtra("shopName").toString();
		this.stockCheckRecordVo = (StockCheckRecordVo) getIntent().getSerializableExtra("checkRecordVo");
		this.checkRecordDetailVos = new ArrayList<StockCheckRecordDetailVo>();
		this.stockCheckManName = (TextView) findViewById(R.id.stockCheckManName);
		this.shop_Name = (TextView) findViewById(R.id.shopName);
		this.select_time = (TextView) findViewById(R.id.select_time);
		this.stockTotalCount = (TextView) findViewById(R.id.stockTotalCount);
		this.stockRealCount = (TextView) findViewById(R.id.stockRealCount);
		this.exhibitCount = (TextView) findViewById(R.id.exhibitCount);
		this.stockMoney = (TextView) findViewById(R.id.stockMoney);
		this.exhibit = (TextView) findViewById(R.id.exhibit);
		this.checkRecordDetail = (BaseListView) findViewById(R.id.checkRecordDetail);
		this.checkRecordDetailAdapter = new StockCheckRecordDetailAdapter(StockCheckRecordResultActivity.this, checkRecordDetailVos);
		this.checkRecordDetail.setAdapter(checkRecordDetailAdapter);
		this.checkRecordDetail.setOnScrollListener(new BaseListView.OnScrollListener() {
			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {
				 if (is_divPage && scrollState == OnScrollListener.SCROLL_STATE_IDLE) {
					if (nodata) {
						currentPage++;
						getResult();
					}
				 }
			}
			@Override
			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {
				is_divPage = (firstVisibleItem + visibleItemCount == totalItemCount);
			}
		});
		
		this.progressDialog = new ProgressDialog(StockCheckRecordResultActivity.this);
		this.progressDialog.setCancelable(false);
		this.progressDialog.setCanceledOnTouchOutside(false);
		this.progressDialog.setMessage("加载中，请稍后。。。");
		
		this.initData();
	}
	/**
	 * 初始化页面值
	 */
	private void initData(){
		this.shop_Name.setText(shopName);
		if (stockCheckRecordVo.getStockCheckRecordTime()!=null) {
        	Date date = new Date(Long.parseLong(stockCheckRecordVo.getStockCheckRecordTime()));
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
			this.select_time.setText(format.format(date));
			this.stockCheckId =stockCheckRecordVo.getStockCheckId();
			
			this.getResult();
        }
	}
	/**
	 * 获取详情列表
	 */
	private void getResult() {
		progressDialog.show();
		nodata = false;
		RequestParameter params = new RequestParameter(true);
		params.setUrl(Constants.BASE_URL + "checkStockRecord/detail");
		params.setParam("shopId", shopId);
		params.setParam("currentPage", currentPage);
		params.setParam("stockCheckId", stockCheckId);
		new AsyncHttpPost(params, new RequestResultCallback() {
			@SuppressWarnings("unchecked")
			@Override
			public void onSuccess(String str) {
				progressDialog.dismiss();
				JsonObject jo = new JsonParser().parse(str).getAsJsonObject();
				JsonElement jsonElement = jo.get("returnCode");
				String returnCode = null;
				if (jsonElement != null) {
					returnCode = jsonElement.getAsString();
				}
				if (returnCode == null ||!returnCode.equals(Constants.LSUCCESS)) {
					ToastUtil.showShortToast(StockCheckRecordResultActivity.this, "获取失败");
					return;
				}
				JsonUtil ju = new JsonUtil(str);
				if (ju.isError(StockCheckRecordResultActivity.this)) {
					return;
				}
				List<StockCheckRecordDetailVo> detailList = new ArrayList<StockCheckRecordDetailVo>();
				detailList = (List<StockCheckRecordDetailVo>) ju.get(Constants.STOCK_CHECK_RECORD_LIST, new TypeToken<List<StockCheckRecordDetailVo>>(){}.getType());
				pageSize = (Integer)ju.get("pageCount",Integer.class);
				if (detailList != null && detailList.size() > 0) {
					if (currentPage<=pageSize){
						nodata = true;
					}
					checkRecordDetailVos.addAll(detailList);
				}
				if (currentPage==1) {
					/**
					 * 设置合计
					 */
					if (checkRecordDetailVos.size()>0) {
						stockCheckRecordDetailVo = checkRecordDetailVos.get(0);
						stockCheckManName.setText(stockCheckRecordDetailVo.getStockCheckManName());
						stockTotalCount.setText(String.valueOf(stockCheckRecordDetailVo.getStockTotalCount()));
						stockRealCount.setText(String.valueOf(stockCheckRecordDetailVo.getStockRealCount()));
						exhibitCount.setText(String.valueOf(stockCheckRecordDetailVo.getExhibitCount()));
						stockMoney.setText(String.valueOf(stockCheckRecordDetailVo.getStockMoney()));
						exhibit.setText(String.valueOf(stockCheckRecordDetailVo.getExhibit()));
						checkRecordDetailVos.remove(0);
					}
				}
				checkRecordDetailAdapter.notifyDataSetChanged();
			}
			@Override
			public void onFail(Exception e) {
				progressDialog.dismiss();
				ToastUtil.showShortToast(StockCheckRecordResultActivity.this, "获取失败");
				e.printStackTrace();
			}
		}).execute();
	}
	
	

}
