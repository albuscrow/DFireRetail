package com.dfire.retail.app.manage.activity.logisticmanager;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextPaint;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;

import com.dfire.retail.app.manage.R;
import com.dfire.retail.app.manage.RetailApplication;
import com.dfire.retail.app.manage.activity.TitleActivity;
import com.dfire.retail.app.manage.adapter.GoodsOrderAdapter;
import com.dfire.retail.app.manage.common.DateDialog;
import com.dfire.retail.app.manage.data.OrderGoodsVo;
import com.dfire.retail.app.manage.data.ShopVo;
import com.dfire.retail.app.manage.global.Constants;
import com.dfire.retail.app.manage.network.AsyncHttpPost;
import com.dfire.retail.app.manage.network.RequestParameter;
import com.dfire.retail.app.manage.network.RequestResultCallback;
import com.dfire.retail.app.manage.util.JsonUtil;
import com.dfire.retail.app.manage.util.ToastUtil;
import com.dfire.retail.app.manage.widget.spinner.AbstractSpinerAdapter.IOnItemSelectListener;
import com.dfire.retail.app.manage.widget.spinner.SpinerPopWindow;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;

/**
 * 物流管理-门店订货
 * @author ys
 *
 */
public class StoreOrderActivity extends TitleActivity implements OnClickListener,IOnItemSelectListener,OnItemClickListener{
	ImageButton add;
	
	private ListView store_order_lv;
	
	private TextView store_order_time;
	
	private int currentPage = 1;
	
	List<OrderGoodsVo> orderGoods;
	
	OrderGoodsVo orderGoodsVo;
	
	ProgressDialog progressDialog;
	
	private DateDialog mDateDialog;
	
	private SpinerPopWindow shopsSpinner;
	
	private TextView shopTextView;
	
	private  ArrayList<ShopVo> shops;
	
	private ArrayList<String> shopsStr;
	
	private ShopVo currentShop;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_store_order);
		setTitleText("门店订货");
		showBackbtn();
		findView();
		getShop(true);
		getStoreOrderGoods();
	}
	
	public void findView(){
		currentShop = RetailApplication.getShopVo();
		
		store_order_lv=(ListView)findViewById(R.id.store_order_lv);
		store_order_time=(TextView)findViewById(R.id.store_order_time);
		
		shopTextView = (TextView) findViewById(R.id.shopName);
		if (currentShop.getType() == ShopVo.DANDIAN || currentShop.getType() == ShopVo.MENDIAN) {
			shopTextView.setCompoundDrawables(null, null, null, null);
		}else{
			shopTextView.setOnClickListener(this);
		}
		
		store_order_time.setOnClickListener(this);
		add=(ImageButton)findViewById(R.id.add);
		add.setOnClickListener(this);
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.store_order_time:
			pushDate();
			break;
		case R.id.add:
			Intent orderAdd=new Intent(StoreOrderActivity.this,StoreOrderAddActivity.class);
			startActivity(orderAdd);
			break;
		case R.id.shopName:
			shopsSpinner.setWidth(shopTextView.getWidth());
			shopsSpinner.showAsDropDown(shopTextView);
			break;
		}
		
	}
	/**
	 * 弹出日期
	 */
	private void pushDate(){
		mDateDialog = new DateDialog(StoreOrderActivity.this);
		mDateDialog.show();
		mDateDialog.getConfirmButton().setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				String date = mDateDialog.getPushDate();
				store_order_time.setText(date);
				getStoreOrderGoods();
				mDateDialog.dismiss();
			}
		});
		mDateDialog.getCancelButton().setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				mDateDialog.dismiss();
			}
		});
	}
	/**
	 * 查询订货列表
	 */
	private void getStoreOrderGoods() {
	    
		progressDialog = new ProgressDialog(StoreOrderActivity.this);
		progressDialog.setCancelable(false);
		progressDialog.setCanceledOnTouchOutside(false);
		progressDialog.setMessage("加载中，请稍后。。。");
		progressDialog.show();
		
		RequestParameter params = new RequestParameter(true);
		params.setUrl(Constants.BASE_URL + "orderGoods/list");
		params.setParam("shopId", RetailApplication.getmShopInfo().getShopId());
		params.setParam("currentPage", 1);
		new AsyncHttpPost(params, new RequestResultCallback() {
			@SuppressWarnings("unchecked")
			@Override
			public void onSuccess(String str) {
				progressDialog.dismiss();
				JsonObject jo = new JsonParser().parse(str).getAsJsonObject();
				JsonElement jsonElement = jo.get("returnCode");
				String returnCode = null;
				if (jsonElement != null) {
					returnCode = jsonElement.getAsString();
				}
				if (returnCode == null ||!returnCode.equals("success")) {
					ToastUtil.showShortToast(StoreOrderActivity.this, "获取失败");
					return;
				}
				JsonUtil ju = new JsonUtil(str);
				if (ju.isError(StoreOrderActivity.this)) {
					return;
				}
				orderGoods=new ArrayList<OrderGoodsVo>();
				orderGoods = (List<OrderGoodsVo>) ju.get(Constants.ORDER_GOODS_LIST, new TypeToken<List<OrderGoodsVo>>(){}.getType());
				
				
				store_order_lv.setAdapter(new GoodsOrderAdapter(StoreOrderActivity.this, orderGoods));
				store_order_lv.setOnItemClickListener(StoreOrderActivity.this);
			}
			
			@Override
			public void onFail(Exception e) {
				progressDialog.dismiss();
				ToastUtil.showShortToast(StoreOrderActivity.this, Constants.getErrorInf(null, null));
				e.printStackTrace();
			}
		}).execute();
	}
	/**
	 * 获取店铺列表
	 * @param isInit
	 */
	private void getShop(final boolean isInit) {
		if (isInit) {
			currentPage = Constants.PAGE_SIZE_OFFSET;
		}
		RequestParameter params = new RequestParameter(true);
		params.setUrl(Constants.SHOP_LIST_URL);
		params.setParam(Constants.SHOP_ID, RetailApplication.getmShopInfo().getShopId());
		params.setParam(Constants.PAGE, currentPage ++);
		new AsyncHttpPost(params, new RequestResultCallback() {
			@Override
			public void onSuccess(String str) {
				JsonObject jo = new JsonParser().parse(str).getAsJsonObject();
				JsonElement jsonElement = jo.get(Constants.RETURN_CODE);
				String returnCode = null;
				if (jsonElement != null) {
					returnCode = jsonElement.getAsString();
				}
				if (returnCode == null ||!returnCode.equals(Constants.LSUCCESS)) {
					ToastUtil.showShortToast(StoreOrderActivity.this, Constants.getErrorInf(null, null));
					return;
				}
				if (isInit) {
					if (shops == null) {
						shops = new ArrayList<ShopVo>();
					}
					shops.clear();
					shops.add(currentShop);
				}
				shops.addAll((Collection<? extends ShopVo>) new Gson().fromJson(jo.get("shopList"), new TypeToken<List<ShopVo>>(){}.getType()));
				int pageSize = jo.get(Constants.PAGE_SIZE).getAsInt();
				if (pageSize >= currentPage) {
					getShop(false);
				}else{
					shopsStr = new ArrayList<String>();
					int maxLength = 0;
					String Lengest = Constants.EMPTY_STRING;
					for (ShopVo shop : shops) {
						String shopName = shop.getShopName();
						if (shopName.length() > maxLength) {
							maxLength = shopName.length();
							Lengest = shopName;
						}
						shopsStr.add(shopName);
					}
					TextPaint paint = shopTextView.getPaint();
					shopTextView.setWidth((int) (paint.measureText(Lengest) * 1.2f));
					shopsSpinner = new SpinerPopWindow(StoreOrderActivity.this);
					shopsSpinner.refreshData(shopsStr, 0);
					shopTextView.setText(currentShop.getShopName());
					shopsSpinner.setItemListener(StoreOrderActivity.this);				
				}

			}
			
			@Override
			public void onFail(Exception e) {
				ToastUtil.showShortToast(StoreOrderActivity.this, Constants.getErrorInf(null, null));
				e.printStackTrace();
			}
		}).execute();
	}
	@Override
	public void onItemClick(int pos) {
		shopTextView.setText(shops.get(pos).getShopName());
		currentShop = shops.get(pos);
	}

	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position,
			long id) {
		// TODO Auto-generated method stub
		
	}

}