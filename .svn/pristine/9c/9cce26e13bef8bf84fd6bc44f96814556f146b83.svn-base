package com.dfire.retail.app.manage.activity.stockmanager;

import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.ProgressDialog;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.dfire.retail.app.manage.R;
import com.dfire.retail.app.manage.RetailApplication;
import com.dfire.retail.app.manage.activity.TitleActivity;
import com.dfire.retail.app.manage.adapter.ShopInfoItem;
import com.dfire.retail.app.manage.adapter.StockQueryAdapter;
import com.dfire.retail.app.manage.common.ErrorMsg;
import com.dfire.retail.app.manage.data.AllShopVo;
import com.dfire.retail.app.manage.data.CategoryVo;
import com.dfire.retail.app.manage.data.StockInfoVo;
import com.dfire.retail.app.manage.global.Constants;
import com.dfire.retail.app.manage.network.AsyncHttpPost;
import com.dfire.retail.app.manage.network.RequestParameter;
import com.dfire.retail.app.manage.network.RequestResultCallback;
import com.dfire.retail.app.manage.util.JsonUtil;
import com.dfire.retail.app.manage.util.ToastUtil;
import com.dfire.retail.app.manage.util.Utility;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;

/**
 * 库存管理-库存查询
 * @author wangpeng
 *
 */
public class StockQueryActivity extends TitleActivity implements OnClickListener{
	
	private TextView search;
	private EditText input;
	private ImageView scan;
	private ListView stock_query_lv;
	ProgressDialog progressDialog;
	StockInfoVo stockInfo;
	List<StockInfoVo> stockInfoList =  new ArrayList<StockInfoVo>();;
	private int currentPage=1;
    private int _currentRequestPage = 1;
    private  int pageSize;
    private int sumMoney =0;
    private int nowStore =0;
//    private String shopUrl ="";
    private String shopId = "";
    private LinearLayout titleLine;
    
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_stock_query);
		setTitleText("库存查询");
		showBackbtn();
		findView();
		 //单店
		 if(RetailApplication.getEntityModel().intValue() ==1){
			 titleLine.setVisibility(View.GONE);
		//连锁店	 
		 }else{
			 
			 
		 }
		
		
	}
	public void findView(){
		titleLine = (LinearLayout)findViewById(R.id.linearLayout1);
		search=(TextView)findViewById(R.id.stock_search);
		search.setOnClickListener(this);
		input=(EditText)findViewById(R.id.stock_shop_input);
		scan=(ImageView)findViewById(R.id.stock_scan);
		scan.setOnClickListener(this);
		stock_query_lv=(ListView)findViewById(R.id.stock_query_lv);
	}
	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.stock_search:
			getStockQuery();
			break;

		default:
			break;
		}
	}
	
	private void getStockQuery() {
		progressDialog = new ProgressDialog(StockQueryActivity.this);
		progressDialog.setCancelable(false);
		progressDialog.setCanceledOnTouchOutside(false);
		progressDialog.setMessage("加载中，请稍后。。。");
		progressDialog.show();
		
		RequestParameter params = new RequestParameter(true);
		params.setUrl(Constants.BASE_URL + "stockInfo/list");
		params.setParam("shopId", RetailApplication.getmShopInfo().getShopId());
		params.setParam("currentPage", currentPage);
		new AsyncHttpPost(params, new RequestResultCallback() {
			@Override
			public void onSuccess(String str) {
				progressDialog.dismiss();
				System.out.println(">>>>>>>"+str);
				JsonObject jo = new JsonParser().parse(str).getAsJsonObject();
				stockInfoList=new ArrayList<StockInfoVo>();
				stockInfoList.clear();
				System.out.println("Gson>>>"+stockInfoList);
				stock_query_lv.setAdapter(new StockQueryAdapter(StockQueryActivity.this, stockInfoList));
				
			}
			
			@Override
			public void onFail(Exception e) {
				progressDialog.dismiss();
				ToastUtil.showShortToast(StockQueryActivity.this, "获取失败");
				e.printStackTrace();
			}
		}).execute();
	}
	
	
	/**
	 * 查询商店信息	
	 * @param pagesize
	 */
	private void startSerachData(String pagesize,String url ,String shopId) {
	       
	        getProgressDialog().setCancelable(false);
	        getProgressDialog().setMessage("请求员工信息");
	        getProgressDialog().show();
	        
	        RequestParameter parameters = new RequestParameter(true);
	        parameters.setUrl(url);
	        parameters.setParam(Constants.SHOP_ID, shopId);       
	        parameters.setParam("currentPage",pagesize );
	        parameters.setParam("findParameter", input.getText());
	        
	        new AsyncHttpPost(parameters, new RequestResultCallback() {
				
	            @Override
	            public void onFail(Exception e) {
	                getProgressDialog().dismiss();
	                ToastUtil.showShortToast(getApplicationContext(), e.toString());
	                //testListData();
	            }
	            
	            @Override
	            public void onSuccess(String str) {
	            	//if(_currentRequestPage == pageSize){
	            		getProgressDialog().dismiss();
	            		Message msg = new Message();
	                JsonUtil ju = new JsonUtil(str);
	                List<StockInfoVo> tmpList ;
	                if(ju.getString(Constants.RETURN_CODE).equals(Constants.SUCCESS)){ 
	                	if( _currentRequestPage ==1){
	                		//申请第一页数据时，清空list
	                		//shopInfoList.clear();
	              		
	                		tmpList =  (List<StockInfoVo>) ju.get(Constants.ALL_SHOP_LIST ,
			        		new TypeToken<List<StockInfoVo>>(){}.getType());
			                //如果员工数量大于0，显示信息
			                if(tmpList.size() > 0){
			                	//mListView.setVisibility(View.VISIBLE);
			                	
			                //如果员工人数为0	
			                }else{
			                	//mListView.setVisibility(View.GONE);
			                	msg.arg1 = Constants.HANDLER_SUCESS;
			                	msg.obj = "没有符合要求的记录";
			                }
			        		for(int i =0 ; i < tmpList.size();i++){

			        			stockInfoList.add(tmpList.get(i));
	                		}
			                //请求下一页数据
	                	}else{
	                		tmpList =  (List<StockInfoVo>) ju.get(Constants.STOCK_QUERY_LIST ,
	        		        		new TypeToken<List<StockInfoVo>>(){}.getType());
	                		for(int i =0 ; i < tmpList.size();i++){
	                			stockInfoList.add(tmpList.get(i));
	                		}
	                		 
	                		
	                	}
	                	//刷新list的长度
	                	Utility.setListViewHeightBasedOnChildren(stock_query_lv);
	                	
		                pageSize = ju.getInt(Constants.PAGE_SIZE);
		                if(_currentRequestPage < pageSize){
		                	_currentRequestPage++;

		                	msg.arg1 = Constants.HANDLER_SEARCH;
		                	msg.obj = _currentRequestPage;
		                }
		                	

	                }else{

	                	 msg.arg1 = Constants.HANDLER_FAIL;
		        		 msg.obj = ju.getExceptionCode();
		        		
	                }
	               //处理返回结果 
	                mHandler.sendMessage(msg);
	                
	            }
			}).execute();
	    }
		
	
	/*
	 * 通过网络请求，获取库存信息
	 */
	private void getStockInfo(String shopId){
		//传递请求参数
		RequestParameter param = new RequestParameter(true);
		param.setUrl(Constants.STOCK_QUERY_LIST);
		param.setParam(Constants.SHOP_ID,shopId);
		param.setParam("findParameter",input.getText().toString());
		param.setParam(Constants.PAGE,"1");
		
		AsyncHttpPost httppost = new AsyncHttpPost(param,
	    new RequestResultCallback() {
	        @Override
	        public void onSuccess(String str) {
	        	
	        //	Log.i(TAG,"STR = "+str.length());
	        	
	        	JsonUtil ju = new JsonUtil(str);
	        	stockInfoList.clear();
	        	stockInfoList =  (List<StockInfoVo>) ju.get(Constants.STOCKINFOLIST, 
						new TypeToken<List<StockInfoVo>>(){}.getType());
	        	pageSize = ((Integer) ju.get(Constants.PAGECOUNT,Integer.class)).intValue();
	            sumMoney = ((Integer) ju.get(Constants.SUMMONEY,Integer.class)).intValue();;
	            nowStore = ((Integer) ju.get(Constants.NOWSTORE,Integer.class)).intValue();;
	        	
				// updateView();
				 getProgressDialog().dismiss();

	            Message msg = new Message();
	            if(ju.getString(Constants.RETURN_CODE).equals(Constants.SUCCESS)){
	            	msg.what = Constants.HANDLER_SUCESS;
//	                msg.obj = str;
	            }else{
	            	msg.what = Constants.HANDLER_FAIL;
	            	msg.obj = ju.getExceptionCode();
	            }
	            mHandler.sendMessage(msg);
	        

	           // mLoginHandler.sendMessage(msg);
	        }
	        @Override
	        public void onFail(Exception e) {
	            e.printStackTrace();
	            getProgressDialog().dismiss();
	            //Log.e("results", "Login FaiL");
	            Message msg = new Message();
	            msg.what = Constants.HANDLER_FAIL;
	            msg.obj = e.getMessage();
	            
	            mHandler.sendMessage(msg);
	        }
	    });
		

	}
	
	/**
	 * 处理返回的结果
	 */
	Handler mHandler = new Handler(){
		@Override
		public void handleMessage(Message msg) {
			getProgressDialog().dismiss();
			
			switch (msg.what) {
				case Constants.HANDLER_SUCESS:
					
					ToastUtil.showLongToast(getApplicationContext(),msg.obj.toString());	
					//AddUserInfoActivity.this.finish();
					
				break;
				
				case Constants.HANDLER_FAIL:	
                        ToastUtil.showLongToast(getApplicationContext(),ErrorMsg.getErrorMsg(msg.obj.toString()));
				 
					break;
				case Constants.HANDLER_ERROR:		
                        ToastUtil.showLongToast(getApplicationContext(),
                                msg.obj.toString());
                 break;
				case  Constants.HANDLER_SEARCH:
					
					//startSerachData(msg.obj.toString(),shopUrl,shopId);
					
					break;	
					
			}
		}
	};
	

}